interface Language.Preprocessor.Cpphs.Options where {

{-# NEED #-}
instance Prelude.Functor NHC.Internal.IO;

{-# NEED #-}
instance Prelude.Monad NHC.Internal.IO;

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Fractional (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.RealFrac (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Num (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Real (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Enum (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Read a,Prelude.Integral a) => Prelude.Read (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Ord (Ratio.Ratio a);

{-# NEED #-}
instance Prelude.Show RawOption;

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Show (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Show a) => Prelude.Show (NHC.Internal.IO a);

{-# NEED #-}
instance Prelude.Eq RawOption;

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Eq (Ratio.Ratio a);
interface NHC.Internal
{-# NEED IO #-}
newtype {-#  #-} IO a;
interface NHC.DErrNo
{-# NEED ErrNo #-}
data ErrNo;
interface IO
{-# NEED Handle #-}
newtype {-#  #-} Handle;
interface NHC.Internal
{-# NEED World #-}
data World;
interface Language.Preprocessor.Cpphs.Options
{-# NEED RawOption #-}
data RawOption;
interface Ratio
{-# NEED Ratio #-}
data Ratio a;
interface ! Language.Preprocessor.Cpphs.Options
{-# NEED parseOptions #-}
parseOptions{-# 1 #-}::([Prelude.String] -> (Prelude.Either Prelude.String CpphsOptions));

{-# NEED defaultBoolOptions #-}
defaultBoolOptions{-# 0 #-}::BoolOptions;

{-# NEED defaultCpphsOptions #-}
defaultCpphsOptions{-# 0 #-}::CpphsOptions;

{-# NEED {CpphsOptions CpphsOptions infiles outfiles defines includes preInclude boolopts} #-}
data CpphsOptions
  = CpphsOptions {infiles :: [Prelude.FilePath]} {outfiles :: [Prelude.FilePath]} {defines :: [(Prelude.String,Prelude.String)]} {includes :: [Prelude.String]} {preInclude :: [Prelude.FilePath]} {boolopts :: BoolOptions};

{-# NEED {BoolOptions BoolOptions macros locations hashline pragma stripEol stripC89 lang ansi layout literate warnings} #-}
data BoolOptions
  = BoolOptions {macros :: Prelude.Bool} {locations :: Prelude.Bool} {hashline :: Prelude.Bool} {pragma :: Prelude.Bool} {stripEol :: Prelude.Bool} {stripC89 :: Prelude.Bool} {lang :: Prelude.Bool} {ansi :: Prelude.Bool} {layout :: Prelude.Bool} {literate :: Prelude.Bool} {warnings :: Prelude.Bool};
}

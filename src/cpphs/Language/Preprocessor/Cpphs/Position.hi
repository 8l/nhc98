interface Language.Preprocessor.Cpphs.Position where {

{-# NEED #-}
instance Prelude.Functor NHC.Internal.IO;

{-# NEED #-}
instance Prelude.Monad NHC.Internal.IO;

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Fractional (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.RealFrac (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Num (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Real (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Enum (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Read a,Prelude.Integral a) => Prelude.Read (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Ord (Ratio.Ratio a);

{-# NEED #-}
instance Prelude.Show Posn;

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Show (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Show a) => Prelude.Show (NHC.Internal.IO a);

{-# NEED #-}
instance Prelude.Eq Posn;

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Eq (Ratio.Ratio a);
interface NHC.Internal
{-# NEED IO #-}
newtype {-#  #-} IO a;
interface NHC.DErrNo
{-# NEED ErrNo #-}
data ErrNo;
interface IO
{-# NEED Handle #-}
newtype {-#  #-} Handle;
interface NHC.Internal
{-# NEED World #-}
data World;
interface Ratio
{-# NEED Ratio #-}
data Ratio a;
interface ! Language.Preprocessor.Cpphs.Position
{-# NEED cpp2hask #-}
cpp2hask{-# 1 #-}::(Prelude.String -> Prelude.String);

{-# NEED haskline #-}
haskline{-# 1 #-}::(Posn -> Prelude.String);

{-# NEED cppline #-}
cppline{-# 1 #-}::(Posn -> Prelude.String);

{-# NEED directory #-}
directory{-# 1 #-}::(Posn -> Prelude.FilePath);

{-# NEED filename #-}
filename{-# 1 #-}::(Posn -> Prelude.String);

{-# NEED lineno #-}
lineno{-# 1 #-}::(Posn -> Prelude.Int);

{-# NEED newpos #-}
newpos{-# 3 #-}::(Prelude.Int -> ((Prelude.Maybe Prelude.String) -> (Posn -> Posn)));

{-# NEED newlines #-}
newlines{-# 2 #-}::(Prelude.Int -> (Posn -> Posn));

{-# NEED tab #-}
tab{-# 1 #-}::(Posn -> Posn);

{-# NEED newline #-}
newline{-# 1 #-}::(Posn -> Posn);

{-# NEED addcol #-}
addcol{-# 2 #-}::(Prelude.Int -> (Posn -> Posn));

{-# NEED newfile #-}
newfile{-# 1 #-}::(Prelude.String -> Posn);

{-# NEED {Posn Pn} #-}
data Posn
  = Pn Prelude.String !Prelude.Int !Prelude.Int (Prelude.Maybe Posn);
}

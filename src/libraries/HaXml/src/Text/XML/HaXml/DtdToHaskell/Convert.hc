#include "newmacros.h"
#include "runtime.h"

#define FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46mkAttrField	((void*)startLabel+16)
#define v862	((void*)startLabel+26)
#define v853	((void*)startLabel+30)
#define v864	((void*)startLabel+46)
#define v861	((void*)startLabel+50)
#define v858	((void*)startLabel+76)
#define v854	((void*)startLabel+81)
#define v850	((void*)startLabel+85)
#define CT_v865	((void*)startLabel+108)
#define F0_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46mkAttrField	((void*)startLabel+116)
#define FN_LAMBDA827	((void*)startLabel+148)
#define CT_v867	((void*)startLabel+168)
#define CF_LAMBDA827	((void*)startLabel+176)
#define FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46441_46mkType	((void*)startLabel+196)
#define v869	((void*)startLabel+208)
#define v871	((void*)startLabel+222)
#define v872	((void*)startLabel+227)
#define v873	((void*)startLabel+236)
#define v876	((void*)startLabel+255)
#define v878	((void*)startLabel+270)
#define v879	((void*)startLabel+275)
#define v880	((void*)startLabel+284)
#define v883	((void*)startLabel+305)
#define v885	((void*)startLabel+320)
#define v886	((void*)startLabel+331)
#define v887	((void*)startLabel+346)
#define CT_v897	((void*)startLabel+408)
#define F0_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46441_46mkType	((void*)startLabel+416)
#define FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46mkAttrDef	((void*)startLabel+448)
#define v927	((void*)startLabel+464)
#define v905	((void*)startLabel+468)
#define v906	((void*)startLabel+473)
#define v902	((void*)startLabel+479)
#define v898	((void*)startLabel+484)
#define v928	((void*)startLabel+494)
#define v910	((void*)startLabel+498)
#define v930	((void*)startLabel+514)
#define v918	((void*)startLabel+518)
#define v931	((void*)startLabel+532)
#define v922	((void*)startLabel+536)
#define v924	((void*)startLabel+550)
#define v925	((void*)startLabel+581)
#define v919	((void*)startLabel+612)
#define v915	((void*)startLabel+616)
#define v911	((void*)startLabel+621)
#define v907	((void*)startLabel+625)
#define CT_v933	((void*)startLabel+648)
#define F0_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46mkAttrDef	((void*)startLabel+656)
#define FN_LAMBDA828	((void*)startLabel+688)
#define CT_v935	((void*)startLabel+708)
#define CF_LAMBDA828	((void*)startLabel+716)
#define FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46mkData	((void*)startLabel+736)
#define v939	((void*)startLabel+746)
#define v940	((void*)startLabel+767)
#define v946	((void*)startLabel+778)
#define v944	((void*)startLabel+782)
#define v941	((void*)startLabel+814)
#define v936	((void*)startLabel+819)
#define CT_v947	((void*)startLabel+872)
#define F0_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46mkData	((void*)startLabel+880)
#define FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46417_46mkConstr	((void*)startLabel+908)
#define CT_v948	((void*)startLabel+940)
#define F0_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46417_46mkConstr	((void*)startLabel+948)
#define FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46418_46mkConsName	((void*)startLabel+972)
#define CT_v952	((void*)startLabel+1024)
#define F0_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46418_46mkConsName	((void*)startLabel+1032)
#define FN_LAMBDA835	((void*)startLabel+1072)
#define CT_v954	((void*)startLabel+1092)
#define CF_LAMBDA835	((void*)startLabel+1100)
#define FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46419_46flatten	((void*)startLabel+1112)
#define v969	((void*)startLabel+1138)
#define v958	((void*)startLabel+1142)
#define v959	((void*)startLabel+1148)
#define v960	((void*)startLabel+1154)
#define v961	((void*)startLabel+1160)
#define v962	((void*)startLabel+1189)
#define v963	((void*)startLabel+1219)
#define v964	((void*)startLabel+1224)
#define v965	((void*)startLabel+1229)
#define v966	((void*)startLabel+1234)
#define v955	((void*)startLabel+1245)
#define CT_v971	((void*)startLabel+1260)
#define F0_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46419_46flatten	((void*)startLabel+1268)
#define FN_LAMBDA834	((void*)startLabel+1328)
#define CT_v973	((void*)startLabel+1348)
#define CF_LAMBDA834	((void*)startLabel+1356)
#define FN_LAMBDA833	((void*)startLabel+1368)
#define CT_v975	((void*)startLabel+1388)
#define CF_LAMBDA833	((void*)startLabel+1396)
#define FN_LAMBDA832	((void*)startLabel+1408)
#define CT_v976	((void*)startLabel+1428)
#define CF_LAMBDA832	((void*)startLabel+1436)
#define FN_LAMBDA831	((void*)startLabel+1448)
#define CT_v978	((void*)startLabel+1468)
#define CF_LAMBDA831	((void*)startLabel+1476)
#define FN_LAMBDA830	((void*)startLabel+1488)
#define CT_v979	((void*)startLabel+1508)
#define CF_LAMBDA830	((void*)startLabel+1516)
#define FN_LAMBDA829	((void*)startLabel+1528)
#define CT_v980	((void*)startLabel+1548)
#define CF_LAMBDA829	((void*)startLabel+1556)
#define FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46convert	((void*)startLabel+1568)
#define v992	((void*)startLabel+1584)
#define v988	((void*)startLabel+1588)
#define v985	((void*)startLabel+1638)
#define v981	((void*)startLabel+1643)
#define CT_v994	((void*)startLabel+1664)
#define F0_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46convert	((void*)startLabel+1672)
#define FN_LAMBDA844	((void*)startLabel+1720)
#define CT_v996	((void*)startLabel+1740)
#define CF_LAMBDA844	((void*)startLabel+1748)
#define FN_LAMBDA843	((void*)startLabel+1764)
#define v998	((void*)startLabel+1778)
#define v999	((void*)startLabel+1793)
#define v1000	((void*)startLabel+1822)
#define v1002	((void*)startLabel+1836)
#define v1003	((void*)startLabel+1865)
#define v1004	((void*)startLabel+1929)
#define v1008	((void*)startLabel+1944)
#define v1018	((void*)startLabel+1956)
#define v1012	((void*)startLabel+1960)
#define v1009	((void*)startLabel+1994)
#define v1013	((void*)startLabel+1999)
#define v1014	((void*)startLabel+2033)
#define v1005	((void*)startLabel+2059)
#define CT_v1019	((void*)startLabel+2104)
#define F0_LAMBDA843	((void*)startLabel+2112)
#define FN_LAMBDA842	((void*)startLabel+2176)
#define CT_v1021	((void*)startLabel+2196)
#define CF_LAMBDA842	((void*)startLabel+2204)
#define FN_LAMBDA841	((void*)startLabel+2220)
#define CT_v1022	((void*)startLabel+2244)
#define F0_LAMBDA841	((void*)startLabel+2252)
#define FN_LAMBDA840	((void*)startLabel+2264)
#define v1027	((void*)startLabel+2274)
#define v1026	((void*)startLabel+2278)
#define v1023	((void*)startLabel+2283)
#define CT_v1028	((void*)startLabel+2296)
#define F0_LAMBDA840	((void*)startLabel+2304)
#define FN_LAMBDA839	((void*)startLabel+2324)
#define CT_v1030	((void*)startLabel+2344)
#define CF_LAMBDA839	((void*)startLabel+2352)
#define FN_LAMBDA838	((void*)startLabel+2364)
#define CT_v1031	((void*)startLabel+2384)
#define F0_LAMBDA838	((void*)startLabel+2392)
#define FN_LAMBDA837	((void*)startLabel+2408)
#define CT_v1032	((void*)startLabel+2432)
#define F0_LAMBDA837	((void*)startLabel+2440)
#define FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46378_46modifier	((void*)startLabel+2460)
#define v1053	((void*)startLabel+2474)
#define v1036	((void*)startLabel+2478)
#define v1033	((void*)startLabel+2494)
#define v1054	((void*)startLabel+2506)
#define v1040	((void*)startLabel+2510)
#define v1055	((void*)startLabel+2524)
#define v1044	((void*)startLabel+2528)
#define v1056	((void*)startLabel+2540)
#define v1048	((void*)startLabel+2544)
#define v1057	((void*)startLabel+2556)
#define v1052	((void*)startLabel+2560)
#define v1045	((void*)startLabel+2602)
#define v1041	((void*)startLabel+2607)
#define v1037	((void*)startLabel+2612)
#define CT_v1058	((void*)startLabel+2704)
#define F0_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46378_46modifier	((void*)startLabel+2712)
#define FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46379_46inner	((void*)startLabel+2748)
#define v1062	((void*)startLabel+2760)
#define v1074	((void*)startLabel+2772)
#define v1066	((void*)startLabel+2776)
#define v1063	((void*)startLabel+2792)
#define v1067	((void*)startLabel+2797)
#define v1068	((void*)startLabel+2816)
#define v1075	((void*)startLabel+2832)
#define v1072	((void*)startLabel+2836)
#define v1069	((void*)startLabel+2849)
#define v1059	((void*)startLabel+2865)
#define CT_v1076	((void*)startLabel+2896)
#define F0_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46379_46inner	((void*)startLabel+2904)
#define FN_LAMBDA836	((void*)startLabel+2940)
#define CT_v1078	((void*)startLabel+2960)
#define CF_LAMBDA836	((void*)startLabel+2968)
#define FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46380_46modf	((void*)startLabel+2984)
#define v1080	((void*)startLabel+2998)
#define v1081	((void*)startLabel+3001)
#define v1082	((void*)startLabel+3008)
#define v1083	((void*)startLabel+3015)
#define CT_v1085	((void*)startLabel+3044)
#define F0_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46380_46modf	((void*)startLabel+3052)
#define CT_v1086	((void*)startLabel+3112)
#define FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46356_46database	((void*)startLabel+3160)
#define v1088	((void*)startLabel+3170)
#define v1089	((void*)startLabel+3173)
#define v1110	((void*)startLabel+3192)
#define v1093	((void*)startLabel+3196)
#define v1097	((void*)startLabel+3220)
#define v1098	((void*)startLabel+3246)
#define v1101	((void*)startLabel+3282)
#define v1105	((void*)startLabel+3308)
#define v1106	((void*)startLabel+3334)
#define v1090	((void*)startLabel+3385)
#define CT_v1117	((void*)startLabel+3412)
#define F0_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46356_46database	((void*)startLabel+3420)
#define FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46357_46replace	((void*)startLabel+3476)
#define v1121	((void*)startLabel+3488)
#define v1122	((void*)startLabel+3495)
#define v1127	((void*)startLabel+3532)
#define v1129	((void*)startLabel+3560)
#define v1123	((void*)startLabel+3565)
#define v1118	((void*)startLabel+3570)
#define CT_v1133	((void*)startLabel+3592)
#define F0_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46357_46replace	((void*)startLabel+3600)
#define FN_LAMBDA846	((void*)startLabel+3644)
#define CT_v1135	((void*)startLabel+3664)
#define CF_LAMBDA846	((void*)startLabel+3672)
#define FN_LAMBDA845	((void*)startLabel+3684)
#define CT_v1137	((void*)startLabel+3704)
#define CF_LAMBDA845	((void*)startLabel+3712)
#define ST_v977	((void*)startLabel+3716)
#define ST_v974	((void*)startLabel+3720)
#define ST_v1020	((void*)startLabel+3724)
#define ST_v934	((void*)startLabel+3820)
#define ST_v866	((void*)startLabel+3908)
#define ST_v1134	((void*)startLabel+3996)
#define ST_v995	((void*)startLabel+4082)
#define ST_v1077	((void*)startLabel+4168)
#define ST_v972	((void*)startLabel+4254)
#define ST_v1029	((void*)startLabel+4341)
#define ST_v953	((void*)startLabel+4426)
#define ST_v1136	((void*)startLabel+4428)
extern Node FN_Text_46XML_46HaXml_46DtdToHaskell_46TypeDef_46name_95f[];
extern Node FN_NHC_46Internal_46_95apply2[];
extern Node FN_NHC_46Internal_46_95patternMatchFail[];
extern Node FN_Prelude_46Show_46Text_46XML_46HaXml_46Types_46AttValue_46show[];
extern Node FN_Text_46XML_46HaXml_46DtdToHaskell_46TypeDef_46name_95a[];
extern Node FN_Text_46XML_46HaXml_46DtdToHaskell_46TypeDef_46name_95ac[];
extern Node FN_Text_46XML_46HaXml_46DtdToHaskell_46TypeDef_46hName[];
extern Node FN_Prelude_46map[];
extern Node FN_NHC_46Internal_46_95apply1[];
extern Node FN_Prelude_46concat[];
extern Node FN_List_46intersperse[];
extern Node FN_Prelude_46_43_43[];
extern Node FN_Prelude_46concatMap[];
extern Node FN_Prelude_46flip[];
extern Node FN_Prelude_46_46[];
extern Node F0_Text_46XML_46HaXml_46DtdToHaskell_46TypeDef_46name[];
extern Node FN_Text_46XML_46HaXml_46DtdToHaskell_46TypeDef_46name[];
extern Node FN_Text_46XML_46HaXml_46DtdToHaskell_46TypeDef_46name_95[];
extern Node CF_Prelude_46reverse[];
extern Node FN_Prelude_46lookup[];
extern Node CF_Prelude_46Eq_46Text_46XML_46HaXml_46Types_46QName[];
extern Node FN_NHC_46Internal_46_95apply4[];
extern Node FN_List_46nub[];
extern Node CF_Prelude_46Eq_46Text_46XML_46HaXml_46Types_46AttDef[];
extern Node FN_Prelude_46error[];
extern Node FN_Prelude_46_61_61[];
extern Node CF_Prelude_46otherwise[];

static Node startLabel[] = {
  42
, bytes2word(0,0,2,0)
, bytes2word(1,1,0,2)
, useLabel(CT_v865)
,	/* FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46mkAttrField: (byte 0) */
  bytes2word(NEEDSTACK_I16,PUSH_ZAP_ARG_I1,EVAL,NEEDHEAP_I32)
, bytes2word(TABLESWITCH,2,TOP(8),BOT(8))
,	/* v862: (byte 2) */
  bytes2word(TOP(4),BOT(4),POP_I1,JUMP)
,	/* v853: (byte 2) */
  bytes2word(57,0,UNPACK,1)
, bytes2word(PUSH_ZAP_ARG_I2,EVAL,UNPACK,3)
, bytes2word(PUSH_P1,0,EVAL,NEEDHEAP_I32)
, bytes2word(TABLESWITCH,2,TOP(8),BOT(8))
,	/* v864: (byte 2) */
  bytes2word(TOP(4),BOT(4),POP_I1,JUMP)
,	/* v861: (byte 2) */
  bytes2word(28,0,UNPACK,1)
, bytes2word(HEAP_CVAL_I3,HEAP_P1,4,HEAP_P1)
, bytes2word(0,HEAP_CVAL_I4,HEAP_P1,4)
, bytes2word(HEAP_P1,0,HEAP_CVAL_I5,HEAP_OFF_N1)
, bytes2word(4,HEAP_I2,HEAP_P1,3)
, bytes2word(PUSH_HEAP,HEAP_CVAL_N1,1,HEAP_OFF_N1)
,	/* v858: (byte 4) */
  bytes2word(11,HEAP_OFF_N1,6,RETURN)
, bytes2word(POP_P1,3,JUMP,2)
,	/* v854: (byte 1) */
  bytes2word(0,POP_I1,JUMP,2)
,	/* v850: (byte 1) */
  bytes2word(0,HEAP_CVAL_P1,6,PUSH_HEAP)
, bytes2word(HEAP_CVAL_P1,7,HEAP_OFF_N1,2)
, bytes2word(RETURN_EVAL,ENDCODE,0,0)
, bytes2word(0,0,0,0)
, 0
, CONSTR(0,2,0)
,	/* CT_v865: (byte 0) */
  HW(5,2)
, 0
,	/* F0_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46mkAttrField: (byte 0) */
  CAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46mkAttrField),2)
, VAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46TypeDef_46name_95f))
, CAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46441_46mkType),2)
, VAPTAG(useLabel(FN_NHC_46Internal_46_95apply2))
, VAPTAG(useLabel(FN_LAMBDA827))
, VAPTAG(useLabel(FN_NHC_46Internal_46_95patternMatchFail))
, bytes2word(0,0,0,0)
, useLabel(CT_v867)
,	/* FN_LAMBDA827: (byte 0) */
  bytes2word(NEEDHEAP_I32,PUSH_CADR_N1,2,STRING)
, bytes2word(RETURN,ENDCODE,0,0)
, bytes2word(0,0,0,0)
, CONSTRW(1,0)
, useLabel(ST_v866)
,	/* CT_v867: (byte 0) */
  HW(0,0)
, 0
,	/* CF_LAMBDA827: (byte 0) */
  VAPTAG(useLabel(FN_LAMBDA827))
, bytes2word(0,0,4,0)
, bytes2word(3,1,2,2)
, bytes2word(1,3,0,4)
, useLabel(CT_v897)
,	/* FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46441_46mkType: (byte 0) */
  bytes2word(NEEDSTACK_I16,PUSH_ZAP_ARG_I3,EVAL,TABLESWITCH)
, bytes2word(3,NOP,TOP(6),BOT(6))
,	/* v869: (byte 4) */
  bytes2word(TOP(53),BOT(53),TOP(103),BOT(103))
, bytes2word(POP_I1,PUSH_ARG,4,EVAL)
, bytes2word(NEEDHEAP_I32,TABLESWITCH,3,NOP)
, bytes2word(TOP(6),BOT(6),TOP(11),BOT(11))
,	/* v871: (byte 2) */
  bytes2word(TOP(20),BOT(20),POP_I1,PUSH_HEAP)
,	/* v872: (byte 3) */
  bytes2word(HEAP_CVAL_N1,1,RETURN,POP_I1)
, bytes2word(HEAP_CVAL_N1,1,PUSH_HEAP,HEAP_CVAL_N1)
,	/* v873: (byte 4) */
  bytes2word(2,HEAP_OFF_N1,2,RETURN)
, bytes2word(UNPACK,2,PUSH_P1,0)
, bytes2word(EVAL,NEEDHEAP_I32,UNPACK,1)
, bytes2word(HEAP_CVAL_N1,1,HEAP_CVAL_I3,HEAP_I1)
, bytes2word(PUSH_HEAP,HEAP_CVAL_IN3,HEAP_OFF_N1,4)
,	/* v876: (byte 3) */
  bytes2word(HEAP_OFF_N1,4,RETURN,UNPACK)
, bytes2word(1,PUSH_ARG,4,EVAL)
, bytes2word(NEEDHEAP_I32,TABLESWITCH,3,NOP)
, bytes2word(TOP(6),BOT(6),TOP(11),BOT(11))
,	/* v878: (byte 2) */
  bytes2word(TOP(20),BOT(20),POP_I1,PUSH_HEAP)
,	/* v879: (byte 3) */
  bytes2word(HEAP_CVAL_N1,1,RETURN,POP_I1)
, bytes2word(HEAP_CVAL_N1,1,PUSH_HEAP,HEAP_CVAL_N1)
,	/* v880: (byte 4) */
  bytes2word(2,HEAP_OFF_N1,2,RETURN)
, bytes2word(UNPACK,2,PUSH_P1,0)
, bytes2word(ZAP_STACK_P1,2,EVAL,NEEDHEAP_I32)
, bytes2word(UNPACK,1,HEAP_CVAL_N1,1)
, bytes2word(HEAP_CVAL_I3,HEAP_I1,PUSH_HEAP,HEAP_CVAL_IN3)
, bytes2word(HEAP_OFF_N1,4,HEAP_OFF_N1,4)
,	/* v883: (byte 1) */
  bytes2word(RETURN,UNPACK,1,PUSH_ZAP_ARG)
, bytes2word(4,EVAL,NEEDHEAP_I32,TABLESWITCH)
, bytes2word(3,NOP,TOP(6),BOT(6))
,	/* v885: (byte 4) */
  bytes2word(TOP(17),BOT(17),TOP(32),BOT(32))
, bytes2word(POP_I1,HEAP_CVAL_I4,HEAP_ARG_ARG,1)
, bytes2word(2,PUSH_HEAP,HEAP_CVAL_N1,4)
,	/* v886: (byte 3) */
  bytes2word(HEAP_OFF_N1,4,RETURN,POP_I1)
, bytes2word(HEAP_CVAL_I4,HEAP_ARG_ARG,1,2)
, bytes2word(HEAP_CVAL_N1,4,HEAP_OFF_N1,4)
, bytes2word(PUSH_HEAP,HEAP_CVAL_N1,2,HEAP_OFF_N1)
,	/* v887: (byte 2) */
  bytes2word(3,RETURN,UNPACK,2)
, bytes2word(PUSH_P1,0,ZAP_STACK_P1,3)
, bytes2word(ZAP_STACK_P1,2,EVAL,NEEDHEAP_I32)
, bytes2word(UNPACK,1,HEAP_CVAL_I4,HEAP_ARG_ARG)
, bytes2word(1,2,HEAP_CVAL_N1,4)
, bytes2word(HEAP_OFF_N1,4,HEAP_CVAL_I3,HEAP_I1)
, bytes2word(HEAP_CVAL_I5,HEAP_ARG_ARG,1,2)
, bytes2word(HEAP_OFF_N1,5,HEAP_CVAL_P1,6)
, bytes2word(HEAP_OFF_N1,5,PUSH_HEAP,HEAP_CVAL_IN3)
, bytes2word(HEAP_OFF_N1,11,HEAP_OFF_N1,4)
, bytes2word(RETURN,ENDCODE,0,0)
, bytes2word(0,0,0,0)
, CONSTR(9,1,0)
, CONSTR(1,2,0)
, CONSTR(0,1,0)
, CONSTR(8,0,0)
,	/* CT_v897: (byte 0) */
  HW(4,4)
, 0
,	/* F0_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46441_46mkType: (byte 0) */
  CAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46441_46mkType),4)
, VAPTAG(useLabel(FN_Prelude_46Show_46Text_46XML_46HaXml_46Types_46AttValue_46show))
, VAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46TypeDef_46name_95a))
, VAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46TypeDef_46name_95ac))
, VAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46TypeDef_46hName))
, bytes2word(0,0,2,0)
, bytes2word(1,1,0,2)
, useLabel(CT_v933)
,	/* FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46mkAttrDef: (byte 0) */
  bytes2word(NEEDSTACK_I16,PUSH_ARG_I2,EVAL,UNPACK)
, bytes2word(3,PUSH_I1,EVAL,NEEDHEAP_I32)
, bytes2word(TABLESWITCH,3,TOP(10),BOT(10))
,	/* v927: (byte 4) */
  bytes2word(TOP(15),BOT(15),TOP(6),BOT(6))
,	/* v905: (byte 4) */
  bytes2word(POP_I1,JUMP,13,0)
, bytes2word(POP_I1,PUSH_HEAP,HEAP_CVAL_N1,1)
,	/* v906: (byte 1) */
  bytes2word(RETURN,UNPACK,1,PUSH_HEAP)
,	/* v902: (byte 3) */
  bytes2word(HEAP_CVAL_N1,1,RETURN,POP_P1)
,	/* v898: (byte 4) */
  bytes2word(3,JUMP,2,0)
, bytes2word(PUSH_ZAP_ARG_I1,EVAL,NEEDHEAP_I32,TABLESWITCH)
, bytes2word(2,NOP,TOP(8),BOT(8))
,	/* v928: (byte 2) */
  bytes2word(TOP(4),BOT(4),POP_I1,JUMP)
,	/* v910: (byte 2) */
  bytes2word(129,0,UNPACK,1)
, bytes2word(PUSH_ARG_I2,UNPACK,3,PUSH_P1)
, bytes2word(0,ZAP_ARG_I2,EVAL,NEEDHEAP_I32)
, bytes2word(TABLESWITCH,2,TOP(8),BOT(8))
,	/* v930: (byte 2) */
  bytes2word(TOP(4),BOT(4),POP_I1,JUMP)
,	/* v918: (byte 2) */
  bytes2word(100,0,UNPACK,1)
, bytes2word(PUSH_P1,2,EVAL,NEEDHEAP_I32)
, bytes2word(TABLESWITCH,3,TOP(6),BOT(6))
,	/* v931: (byte 4) */
  bytes2word(TOP(6),BOT(6),TOP(10),BOT(10))
,	/* v922: (byte 4) */
  bytes2word(POP_I1,JUMP,78,0)
, bytes2word(UNPACK,1,PUSH_P1,0)
, bytes2word(ZAP_STACK_P1,1,EVAL,NEEDHEAP_I32)
, bytes2word(TABLESWITCH,2,TOP(4),BOT(4))
,	/* v924: (byte 2) */
  bytes2word(TOP(35),BOT(35),UNPACK,1)
, bytes2word(HEAP_CVAL_I3,HEAP_P1,6,HEAP_I2)
, bytes2word(HEAP_CVAL_I4,HEAP_P1,6,HEAP_I2)
, bytes2word(HEAP_CVAL_I5,HEAP_OFF_N1,4,HEAP_P1)
, bytes2word(0,HEAP_CVAL_N1,2,HEAP_OFF_N1)
, bytes2word(10,HEAP_OFF_N1,5,HEAP_CVAL_N1)
, bytes2word(1,PUSH_HEAP,HEAP_CVAL_N1,2)
, bytes2word(HEAP_OFF_N1,5,HEAP_OFF_N1,3)
,	/* v925: (byte 1) */
  bytes2word(RETURN,UNPACK,1,HEAP_CVAL_I3)
, bytes2word(HEAP_P1,6,HEAP_I2,HEAP_CVAL_I4)
, bytes2word(HEAP_P1,6,HEAP_I2,HEAP_CVAL_I5)
, bytes2word(HEAP_OFF_N1,4,HEAP_P1,0)
, bytes2word(HEAP_CVAL_N1,2,HEAP_OFF_N1,10)
, bytes2word(HEAP_OFF_N1,5,HEAP_CVAL_N1,1)
, bytes2word(PUSH_HEAP,HEAP_CVAL_N1,2,HEAP_OFF_N1)
,	/* v919: (byte 4) */
  bytes2word(5,HEAP_OFF_N1,3,RETURN)
,	/* v915: (byte 4) */
  bytes2word(POP_I1,JUMP,2,0)
, bytes2word(POP_P1,3,JUMP,2)
,	/* v911: (byte 1) */
  bytes2word(0,POP_I1,JUMP,2)
,	/* v907: (byte 1) */
  bytes2word(0,HEAP_CVAL_P1,6,PUSH_HEAP)
, bytes2word(HEAP_CVAL_P1,7,HEAP_OFF_N1,2)
, bytes2word(RETURN_EVAL,ENDCODE,0,0)
, bytes2word(0,0,0,0)
, CONSTR(1,2,0)
, CONSTR(0,0,0)
,	/* CT_v933: (byte 0) */
  HW(5,2)
, 0
,	/* F0_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46mkAttrDef: (byte 0) */
  CAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46mkAttrDef),2)
, VAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46TypeDef_46name_95a))
, CAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46TypeDef_46name_95ac),1)
, VAPTAG(useLabel(FN_Prelude_46map))
, VAPTAG(useLabel(FN_LAMBDA828))
, VAPTAG(useLabel(FN_NHC_46Internal_46_95patternMatchFail))
, bytes2word(0,0,0,0)
, useLabel(CT_v935)
,	/* FN_LAMBDA828: (byte 0) */
  bytes2word(NEEDHEAP_I32,PUSH_CADR_N1,2,STRING)
, bytes2word(RETURN,ENDCODE,0,0)
, bytes2word(0,0,0,0)
, CONSTRW(1,0)
, useLabel(ST_v934)
,	/* CT_v935: (byte 0) */
  HW(0,0)
, 0
,	/* CF_LAMBDA828: (byte 0) */
  VAPTAG(useLabel(FN_LAMBDA828))
, bytes2word(0,0,4,0)
, bytes2word(3,1,2,2)
, bytes2word(1,3,0,4)
, useLabel(CT_v947)
,	/* FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46mkData: (byte 0) */
  bytes2word(NEEDSTACK_I16,PUSH_ARG_I1,EVAL,NEEDHEAP_I32)
, bytes2word(TABLESWITCH,2,TOP(4),BOT(4))
,	/* v939: (byte 2) */
  bytes2word(TOP(25),BOT(25),POP_I1,HEAP_CVAL_N1)
, bytes2word(1,HEAP_CVAL_N1,2,HEAP_ARG_ARG)
, bytes2word(3,4,HEAP_ARG,2)
, bytes2word(HEAP_OFF_N1,5,HEAP_CVAL_N1,1)
, bytes2word(PUSH_HEAP,HEAP_CVAL_IN3,HEAP_OFF_N1,7)
,	/* v940: (byte 3) */
  bytes2word(HEAP_OFF_N1,3,RETURN,UNPACK)
, bytes2word(2,PUSH_I1,EVAL,NEEDHEAP_I32)
, bytes2word(TABLESWITCH,2,TOP(8),BOT(8))
,	/* v946: (byte 2) */
  bytes2word(TOP(4),BOT(4),POP_I1,JUMP)
,	/* v944: (byte 2) */
  bytes2word(34,0,POP_I1,HEAP_CVAL_N1)
, bytes2word(4,HEAP_ARG,4,HEAP_P1)
, bytes2word(0,HEAP_CVAL_N1,1,HEAP_CVAL_IN3)
, bytes2word(HEAP_OFF_N1,5,HEAP_OFF_N1,3)
, bytes2word(HEAP_CVAL_N1,2,HEAP_ARG_ARG,3)
, bytes2word(4,HEAP_ARG,2,HEAP_OFF_N1)
, bytes2word(7,HEAP_CVAL_N1,1,PUSH_HEAP)
, bytes2word(HEAP_CVAL_IN3,HEAP_OFF_N1,7,HEAP_OFF_N1)
,	/* v941: (byte 2) */
  bytes2word(3,RETURN,POP_P1,2)
,	/* v936: (byte 3) */
  bytes2word(JUMP,2,0,HEAP_CVAL_I3)
, bytes2word(HEAP_CVAL_I4,HEAP_OFF_N1,2,HEAP_ARG)
, bytes2word(4,HEAP_CVAL_I5,HEAP_OFF_N1,4)
, bytes2word(HEAP_ARG,1,HEAP_CVAL_N1,2)
, bytes2word(HEAP_ARG_ARG,3,4,HEAP_ARG)
, bytes2word(2,HEAP_OFF_N1,7,HEAP_CVAL_N1)
, bytes2word(1,PUSH_HEAP,HEAP_CVAL_IN3,HEAP_OFF_N1)
, bytes2word(7,HEAP_OFF_N1,3,RETURN)
, bytes2word(ENDCODE,0,0,0)
, bytes2word(0,0,0,0)
, CONSTR(0,2,0)
, CONSTR(1,2,0)
, CONSTR(0,4,0)
, CONSTR(0,0,0)
,	/* CT_v947: (byte 0) */
  HW(3,4)
, 0
,	/* F0_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46mkData: (byte 0) */
  CAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46mkData),4)
, CAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46417_46mkConstr),2)
, VAPTAG(useLabel(FN_NHC_46Internal_46_95apply1))
, VAPTAG(useLabel(FN_Prelude_46map))
, bytes2word(0,0,2,0)
, bytes2word(1,1,0,2)
, useLabel(CT_v948)
,	/* FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46417_46mkConstr: (byte 0) */
  bytes2word(NEEDHEAP_I32,HEAP_CVAL_I3,HEAP_CVAL_I4,HEAP_OFF_N1)
, bytes2word(2,HEAP_ARG_ARG,1,2)
, bytes2word(PUSH_HEAP,HEAP_CVAL_N1,1,HEAP_OFF_N1)
, bytes2word(5,HEAP_ARG,2,RETURN)
, bytes2word(ENDCODE,0,0,0)
, bytes2word(0,0,0,0)
, 0
, CONSTR(0,2,0)
,	/* CT_v948: (byte 0) */
  HW(2,2)
, 0
,	/* F0_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46417_46mkConstr: (byte 0) */
  CAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46417_46mkConstr),2)
, CAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46418_46mkConsName),2)
, VAPTAG(useLabel(FN_NHC_46Internal_46_95apply2))
, bytes2word(0,0,2,0)
, bytes2word(1,1,0,2)
, useLabel(CT_v952)
,	/* FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46418_46mkConsName: (byte 0) */
  bytes2word(NEEDSTACK_I16,PUSH_ZAP_ARG_I1,EVAL,NEEDHEAP_I32)
, bytes2word(UNPACK,2,HEAP_CVAL_I3,HEAP_CVAL_I4)
, bytes2word(HEAP_CVAL_I5,HEAP_CVAL_P1,6,HEAP_OFF_N1)
, bytes2word(2,HEAP_ARG,2,HEAP_CVAL_P1)
, bytes2word(7,HEAP_OFF_N1,6,HEAP_OFF_N1)
, bytes2word(5,HEAP_CVAL_P1,8,HEAP_OFF_N1)
, bytes2word(10,HEAP_OFF_N1,5,HEAP_CVAL_P1)
, bytes2word(9,HEAP_I1,HEAP_OFF_N1,5)
, bytes2word(PUSH_HEAP,HEAP_CVAL_N1,1,HEAP_I1)
, bytes2word(HEAP_OFF_N1,5,RETURN,ENDCODE)
, bytes2word(0,0,0,0)
, 0
, CONSTR(0,2,0)
,	/* CT_v952: (byte 0) */
  HW(7,2)
, 0
,	/* F0_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46418_46mkConsName: (byte 0) */
  CAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46418_46mkConsName),2)
, VAPTAG(useLabel(FN_Prelude_46concat))
, VAPTAG(useLabel(FN_LAMBDA835))
, CAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46419_46flatten),1)
, VAPTAG(useLabel(FN_Prelude_46map))
, VAPTAG(useLabel(FN_List_46intersperse))
, VAPTAG(useLabel(FN_NHC_46Internal_46_95apply1))
, VAPTAG(useLabel(FN_Prelude_46_43_43))
, bytes2word(0,0,0,0)
, useLabel(CT_v954)
,	/* FN_LAMBDA835: (byte 0) */
  bytes2word(NEEDHEAP_I32,PUSH_CADR_N1,2,STRING)
, bytes2word(RETURN,ENDCODE,0,0)
, bytes2word(0,0,0,0)
, CONSTRW(1,0)
, useLabel(ST_v953)
,	/* CT_v954: (byte 0) */
  HW(0,0)
, 0
,	/* CF_LAMBDA835: (byte 0) */
  VAPTAG(useLabel(FN_LAMBDA835))
, bytes2word(1,0,0,1)
, useLabel(CT_v971)
,	/* FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46419_46flatten: (byte 0) */
  bytes2word(NEEDSTACK_I16,PUSH_ZAP_ARG_I1,EVAL,NEEDHEAP_I32)
, bytes2word(TABLESWITCH,10,TOP(24),BOT(24))
, bytes2word(TOP(20),BOT(20),TOP(30),BOT(30))
, bytes2word(TOP(36),BOT(36),TOP(42),BOT(42))
, bytes2word(TOP(71),BOT(71),TOP(101),BOT(101))
, bytes2word(TOP(106),BOT(106),TOP(111),BOT(111))
,	/* v969: (byte 2) */
  bytes2word(TOP(116),BOT(116),POP_I1,JUMP)
,	/* v958: (byte 2) */
  bytes2word(105,0,UNPACK,1)
,	/* v959: (byte 4) */
  bytes2word(PUSH_HEAP,HEAP_CVAL_I3,HEAP_I1,RETURN_EVAL)
, bytes2word(UNPACK,1,PUSH_HEAP,HEAP_CVAL_I3)
,	/* v960: (byte 2) */
  bytes2word(HEAP_I1,RETURN_EVAL,UNPACK,1)
,	/* v961: (byte 4) */
  bytes2word(PUSH_HEAP,HEAP_CVAL_I3,HEAP_I1,RETURN_EVAL)
, bytes2word(UNPACK,1,HEAP_CVAL_I4,HEAP_CVAL_I5)
, bytes2word(HEAP_CVAL_P1,6,HEAP_OFF_N1,2)
, bytes2word(HEAP_P1,0,PUSH_HEAP,HEAP_CVAL_P1)
, bytes2word(7,HEAP_OFF_N1,6,HEAP_OFF_N1)
, bytes2word(5,PUSH_P1,0,PUSH_HEAP)
, bytes2word(HEAP_CVAL_P1,8,ZAP_STACK_P1,2)
, bytes2word(EVAL,NEEDHEAP_I32,APPLY,1)
,	/* v962: (byte 1) */
  bytes2word(RETURN_EVAL,UNPACK,1,HEAP_CVAL_P1)
, bytes2word(9,HEAP_CVAL_I5,HEAP_CVAL_P1,6)
, bytes2word(HEAP_OFF_N1,2,HEAP_P1,0)
, bytes2word(PUSH_HEAP,HEAP_CVAL_P1,7,HEAP_OFF_N1)
, bytes2word(6,HEAP_OFF_N1,5,PUSH_P1)
, bytes2word(0,PUSH_HEAP,HEAP_CVAL_P1,8)
, bytes2word(ZAP_STACK_P1,2,EVAL,NEEDHEAP_I32)
,	/* v963: (byte 3) */
  bytes2word(APPLY,1,RETURN_EVAL,POP_I1)
,	/* v964: (byte 4) */
  bytes2word(PUSH_HEAP,HEAP_CVAL_P1,10,RETURN_EVAL)
, bytes2word(POP_I1,PUSH_HEAP,HEAP_CVAL_P1,11)
,	/* v965: (byte 1) */
  bytes2word(RETURN_EVAL,POP_I1,PUSH_HEAP,HEAP_CVAL_P1)
,	/* v966: (byte 2) */
  bytes2word(12,RETURN_EVAL,UNPACK,1)
, bytes2word(PUSH_P1,0,ZAP_STACK_P1,1)
, bytes2word(EVAL,UNPACK,2,PUSH_I1)
,	/* v955: (byte 1) */
  bytes2word(RETURN_EVAL,HEAP_CVAL_P1,13,PUSH_HEAP)
, bytes2word(HEAP_CVAL_P1,14,HEAP_OFF_N1,2)
, bytes2word(RETURN_EVAL,ENDCODE,0,0)
, bytes2word(0,0,0,0)
,	/* CT_v971: (byte 0) */
  HW(12,1)
, 0
,	/* F0_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46419_46flatten: (byte 0) */
  CAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46419_46flatten),1)
, VAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46419_46flatten))
, VAPTAG(useLabel(FN_LAMBDA829))
, CAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46419_46flatten),1)
, VAPTAG(useLabel(FN_Prelude_46map))
, VAPTAG(useLabel(FN_List_46intersperse))
, VAPTAG(useLabel(FN_Prelude_46concat))
, VAPTAG(useLabel(FN_LAMBDA830))
, VAPTAG(useLabel(FN_LAMBDA831))
, VAPTAG(useLabel(FN_LAMBDA832))
, VAPTAG(useLabel(FN_LAMBDA833))
, VAPTAG(useLabel(FN_LAMBDA834))
, VAPTAG(useLabel(FN_NHC_46Internal_46_95patternMatchFail))
, bytes2word(0,0,0,0)
, useLabel(CT_v973)
,	/* FN_LAMBDA834: (byte 0) */
  bytes2word(NEEDHEAP_I32,PUSH_CADR_N1,2,STRING)
, bytes2word(RETURN,ENDCODE,0,0)
, bytes2word(0,0,0,0)
, CONSTRW(1,0)
, useLabel(ST_v972)
,	/* CT_v973: (byte 0) */
  HW(0,0)
, 0
,	/* CF_LAMBDA834: (byte 0) */
  VAPTAG(useLabel(FN_LAMBDA834))
, bytes2word(0,0,0,0)
, useLabel(CT_v975)
,	/* FN_LAMBDA833: (byte 0) */
  bytes2word(NEEDHEAP_I32,PUSH_CADR_N1,2,STRING)
, bytes2word(RETURN,ENDCODE,0,0)
, bytes2word(0,0,0,0)
, CONSTRW(1,0)
, useLabel(ST_v974)
,	/* CT_v975: (byte 0) */
  HW(0,0)
, 0
,	/* CF_LAMBDA833: (byte 0) */
  VAPTAG(useLabel(FN_LAMBDA833))
, bytes2word(0,0,0,0)
, useLabel(CT_v976)
,	/* FN_LAMBDA832: (byte 0) */
  bytes2word(NEEDHEAP_I32,PUSH_CADR_N1,2,STRING)
, bytes2word(RETURN,ENDCODE,0,0)
, bytes2word(0,0,0,0)
, CONSTRW(1,0)
, useLabel(ST_v974)
,	/* CT_v976: (byte 0) */
  HW(0,0)
, 0
,	/* CF_LAMBDA832: (byte 0) */
  VAPTAG(useLabel(FN_LAMBDA832))
, bytes2word(0,0,0,0)
, useLabel(CT_v978)
,	/* FN_LAMBDA831: (byte 0) */
  bytes2word(NEEDHEAP_I32,PUSH_CADR_N1,2,STRING)
, bytes2word(RETURN,ENDCODE,0,0)
, bytes2word(0,0,0,0)
, CONSTRW(1,0)
, useLabel(ST_v977)
,	/* CT_v978: (byte 0) */
  HW(0,0)
, 0
,	/* CF_LAMBDA831: (byte 0) */
  VAPTAG(useLabel(FN_LAMBDA831))
, bytes2word(0,0,0,0)
, useLabel(CT_v979)
,	/* FN_LAMBDA830: (byte 0) */
  bytes2word(NEEDHEAP_I32,PUSH_CADR_N1,2,STRING)
, bytes2word(RETURN,ENDCODE,0,0)
, bytes2word(0,0,0,0)
, CONSTRW(1,0)
, useLabel(ST_v953)
,	/* CT_v979: (byte 0) */
  HW(0,0)
, 0
,	/* CF_LAMBDA830: (byte 0) */
  VAPTAG(useLabel(FN_LAMBDA830))
, bytes2word(0,0,0,0)
, useLabel(CT_v980)
,	/* FN_LAMBDA829: (byte 0) */
  bytes2word(NEEDHEAP_I32,PUSH_CADR_N1,2,STRING)
, bytes2word(RETURN,ENDCODE,0,0)
, bytes2word(0,0,0,0)
, CONSTRW(1,0)
, useLabel(ST_v953)
,	/* CT_v980: (byte 0) */
  HW(0,0)
, 0
,	/* CF_LAMBDA829: (byte 0) */
  VAPTAG(useLabel(FN_LAMBDA829))
, bytes2word(1,0,0,1)
, useLabel(CT_v994)
,	/* FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46convert: (byte 0) */
  bytes2word(NEEDSTACK_I16,PUSH_ZAP_ARG_I1,EVAL,UNPACK)
, bytes2word(2,PUSH_P1,0,EVAL)
, bytes2word(NEEDHEAP_I32,TABLESWITCH,2,NOP)
,	/* v992: (byte 4) */
  bytes2word(TOP(8),BOT(8),TOP(4),BOT(4))
,	/* v988: (byte 4) */
  bytes2word(POP_I1,JUMP,52,0)
, bytes2word(UNPACK,1,PUSH_P1,2)
, bytes2word(EVAL,NEEDHEAP_I32,UNPACK,2)
, bytes2word(HEAP_CVAL_N1,1,HEAP_I2,HEAP_CVAL_I3)
, bytes2word(HEAP_OFF_N1,3,PUSH_HEAP,HEAP_CVAL_I4)
, bytes2word(HEAP_OFF_N1,3,HEAP_I1,HEAP_CVAL_I5)
, bytes2word(HEAP_P1,0,HEAP_P1,3)
, bytes2word(HEAP_I2,HEAP_CVAL_N1,1,HEAP_P1)
, bytes2word(3,HEAP_CVAL_P1,6,HEAP_OFF_N1)
, bytes2word(3,HEAP_CVAL_P1,7,HEAP_OFF_N1)
, bytes2word(3,HEAP_CVAL_P1,8,HEAP_OFF_N1)
, bytes2word(3,HEAP_I1,PUSH_HEAP,HEAP_CVAL_P1)
, bytes2word(9,HEAP_OFF_N1,14,HEAP_OFF_N1)
,	/* v985: (byte 2) */
  bytes2word(5,RETURN_EVAL,POP_P1,2)
,	/* v981: (byte 3) */
  bytes2word(JUMP,2,0,HEAP_CVAL_P1)
, bytes2word(10,PUSH_HEAP,HEAP_CVAL_P1,11)
, bytes2word(HEAP_OFF_N1,2,RETURN_EVAL,ENDCODE)
, bytes2word(0,0,0,0)
, 0
, CONSTR(0,1,0)
,	/* CT_v994: (byte 0) */
  HW(9,1)
, 0
,	/* F0_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46convert: (byte 0) */
  CAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46convert),1)
, CAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46mkAttrField),1)
, VAPTAG(useLabel(FN_Prelude_46map))
, VAPTAG(useLabel(FN_LAMBDA843))
, CAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46mkAttrDef),1)
, VAPTAG(useLabel(FN_Prelude_46concatMap))
, VAPTAG(useLabel(FN_NHC_46Internal_46_95apply1))
, VAPTAG(useLabel(FN_Prelude_46_43_43))
, VAPTAG(useLabel(FN_LAMBDA844))
, VAPTAG(useLabel(FN_NHC_46Internal_46_95patternMatchFail))
, bytes2word(0,0,0,0)
, useLabel(CT_v996)
,	/* FN_LAMBDA844: (byte 0) */
  bytes2word(NEEDHEAP_I32,PUSH_CADR_N1,2,STRING)
, bytes2word(RETURN,ENDCODE,0,0)
, bytes2word(0,0,0,0)
, CONSTRW(1,0)
, useLabel(ST_v995)
,	/* CT_v996: (byte 0) */
  HW(0,0)
, 0
,	/* CF_LAMBDA844: (byte 0) */
  VAPTAG(useLabel(FN_LAMBDA844))
, bytes2word(3,0,2,1)
, bytes2word(1,2,0,3)
, useLabel(CT_v1019)
,	/* FN_LAMBDA843: (byte 0) */
  bytes2word(NEEDSTACK_I16,PUSH_ZAP_ARG_I3,EVAL,NEEDHEAP_I32)
, bytes2word(TABLESWITCH,4,TOP(8),BOT(8))
, bytes2word(TOP(23),BOT(23),TOP(52),BOT(52))
,	/* v998: (byte 2) */
  bytes2word(TOP(159),BOT(159),POP_I1,HEAP_CVAL_N1)
, bytes2word(1,HEAP_CVAL_N1,1,PUSH_HEAP)
, bytes2word(HEAP_CVAL_I3,HEAP_ARG_ARG,1,2)
, bytes2word(HEAP_OFF_N1,5,HEAP_OFF_N1,5)
,	/* v999: (byte 1) */
  bytes2word(RETURN_EVAL,POP_I1,HEAP_CVAL_N1,1)
, bytes2word(HEAP_CVAL_N1,2,HEAP_CVAL_N1,1)
, bytes2word(HEAP_CVAL_IN3,HEAP_OFF_N1,3,HEAP_OFF_N1)
, bytes2word(3,HEAP_CVAL_N1,1,HEAP_CVAL_IN3)
, bytes2word(HEAP_OFF_N1,5,HEAP_OFF_N1,3)
, bytes2word(PUSH_HEAP,HEAP_CVAL_I3,HEAP_ARG_ARG,1)
, bytes2word(2,HEAP_OFF_N1,13,HEAP_OFF_N1)
,	/* v1000: (byte 2) */
  bytes2word(7,RETURN_EVAL,UNPACK,1)
, bytes2word(PUSH_P1,0,EVAL,NEEDHEAP_P1)
, bytes2word(33,TABLESWITCH,2,NOP)
,	/* v1002: (byte 4) */
  bytes2word(TOP(4),BOT(4),TOP(33),BOT(33))
, bytes2word(POP_I1,HEAP_CVAL_N1,1,HEAP_CVAL_N1)
, bytes2word(4,HEAP_CVAL_N1,1,HEAP_CVAL_IN3)
, bytes2word(HEAP_OFF_N1,3,HEAP_OFF_N1,3)
, bytes2word(HEAP_CVAL_N1,1,HEAP_CVAL_IN3,HEAP_OFF_N1)
, bytes2word(5,HEAP_OFF_N1,3,PUSH_HEAP)
, bytes2word(HEAP_CVAL_I3,HEAP_ARG_ARG,1,2)
, bytes2word(HEAP_OFF_N1,13,HEAP_OFF_N1,7)
,	/* v1003: (byte 1) */
  bytes2word(RETURN_EVAL,UNPACK,1,HEAP_CVAL_N1)
, bytes2word(5,HEAP_CVAL_N1,6,HEAP_CVAL_N1)
, bytes2word(1,HEAP_CVAL_IN3,HEAP_OFF_N1,3)
, bytes2word(HEAP_OFF_N1,3,HEAP_CVAL_I4,HEAP_CVAL_N1)
, bytes2word(1,HEAP_CVAL_I5,HEAP_OFF_N1,3)
, bytes2word(HEAP_OFF_N1,3,HEAP_CVAL_P1,6)
, bytes2word(HEAP_CVAL_P1,7,HEAP_CVAL_P1,8)
, bytes2word(HEAP_CVAL_P1,9,HEAP_OFF_N1,3)
, bytes2word(HEAP_CVAL_P1,8,HEAP_OFF_N1,6)
, bytes2word(HEAP_OFF_N1,5,HEAP_CVAL_P1,8)
, bytes2word(HEAP_OFF_N1,12,HEAP_OFF_N1,5)
, bytes2word(HEAP_CVAL_P1,10,HEAP_OFF_N1,4)
, bytes2word(HEAP_P1,0,HEAP_CVAL_IN3,HEAP_OFF_N1)
, bytes2word(23,HEAP_OFF_N1,5,PUSH_HEAP)
, bytes2word(HEAP_CVAL_I3,HEAP_ARG_ARG,1,2)
, bytes2word(HEAP_OFF_N1,31,HEAP_OFF_N1,7)
,	/* v1004: (byte 1) */
  bytes2word(RETURN_EVAL,UNPACK,1,PUSH_P1)
, bytes2word(0,EVAL,NEEDHEAP_I32,TABLESWITCH)
, bytes2word(3,NOP,TOP(6),BOT(6))
,	/* v1008: (byte 4) */
  bytes2word(TOP(61),BOT(61),TOP(95),BOT(95))
, bytes2word(UNPACK,2,PUSH_P1,0)
, bytes2word(EVAL,NEEDHEAP_I32,TABLESWITCH,2)
,	/* v1018: (byte 4) */
  bytes2word(TOP(8),BOT(8),TOP(4),BOT(4))
,	/* v1012: (byte 4) */
  bytes2word(POP_I1,JUMP,36,0)
, bytes2word(UNPACK,1,HEAP_CVAL_P1,11)
, bytes2word(HEAP_P1,0,HEAP_CVAL_N1,7)
, bytes2word(HEAP_OFF_N1,3,HEAP_CVAL_N1,1)
, bytes2word(HEAP_CVAL_IN3,HEAP_OFF_N1,4,HEAP_OFF_N1)
, bytes2word(3,HEAP_CVAL_N1,1,HEAP_CVAL_IN3)
, bytes2word(HEAP_OFF_N1,5,HEAP_OFF_N1,3)
, bytes2word(PUSH_HEAP,HEAP_CVAL_I3,HEAP_ARG_ARG,1)
, bytes2word(2,HEAP_P1,3,HEAP_OFF_N1)
,	/* v1009: (byte 2) */
  bytes2word(7,RETURN_EVAL,POP_P1,2)
,	/* v1013: (byte 3) */
  bytes2word(JUMP,62,0,UNPACK)
, bytes2word(2,HEAP_CVAL_P1,12,HEAP_CVAL_N1)
, bytes2word(1,HEAP_CVAL_I5,HEAP_OFF_N1,3)
, bytes2word(HEAP_OFF_N1,3,HEAP_CVAL_P1,13)
, bytes2word(HEAP_CVAL_P1,8,HEAP_OFF_N1,5)
, bytes2word(HEAP_OFF_N1,3,HEAP_CVAL_P1,10)
, bytes2word(HEAP_OFF_N1,4,HEAP_P1,0)
, bytes2word(PUSH_HEAP,HEAP_CVAL_I3,HEAP_ARG_ARG,1)
, bytes2word(2,HEAP_I2,HEAP_OFF_N1,7)
,	/* v1014: (byte 1) */
  bytes2word(RETURN_EVAL,UNPACK,2,HEAP_CVAL_P1)
, bytes2word(13,HEAP_CVAL_P1,10,HEAP_OFF_N1)
, bytes2word(2,HEAP_P1,0,HEAP_CVAL_N1)
, bytes2word(1,HEAP_CVAL_IN3,HEAP_OFF_N1,5)
, bytes2word(HEAP_OFF_N1,3,PUSH_HEAP,HEAP_CVAL_I3)
, bytes2word(HEAP_ARG_ARG,1,2,HEAP_I2)
,	/* v1005: (byte 3) */
  bytes2word(HEAP_OFF_N1,7,RETURN_EVAL,HEAP_CVAL_P1)
, bytes2word(14,PUSH_HEAP,HEAP_CVAL_P1,15)
, bytes2word(HEAP_OFF_N1,2,RETURN_EVAL,ENDCODE)
, bytes2word(0,0,0,0)
, 0
, CONSTR(9,1,0)
, CONSTR(7,0,0)
, CONSTR(2,0,0)
, CONSTR(8,0,0)
, CONSTR(1,2,0)
, CONSTR(6,0,0)
, CONSTR(0,0,0)
,	/* CT_v1019: (byte 0) */
  HW(13,3)
, 0
,	/* F0_LAMBDA843: (byte 0) */
  CAPTAG(useLabel(FN_LAMBDA843),3)
, VAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46378_46modifier))
, CAPTAG(useLabel(FN_LAMBDA837),2)
, CAPTAG(useLabel(FN_Prelude_46flip),1)
, CAPTAG(useLabel(FN_LAMBDA838),1)
, CAPTAG(useLabel(FN_LAMBDA840),1)
, VAPTAG(useLabel(FN_Prelude_46_46))
, useLabel(F0_Text_46XML_46HaXml_46DtdToHaskell_46TypeDef_46name)
, VAPTAG(useLabel(FN_Prelude_46map))
, VAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46TypeDef_46name))
, CAPTAG(useLabel(FN_LAMBDA841),2)
, CAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46379_46inner),1)
, VAPTAG(useLabel(FN_LAMBDA842))
, VAPTAG(useLabel(FN_NHC_46Internal_46_95patternMatchFail))
, bytes2word(0,0,0,0)
, useLabel(CT_v1021)
,	/* FN_LAMBDA842: (byte 0) */
  bytes2word(NEEDHEAP_I32,PUSH_CADR_N1,2,STRING)
, bytes2word(RETURN,ENDCODE,0,0)
, bytes2word(0,0,0,0)
, CONSTRW(1,0)
, useLabel(ST_v1020)
,	/* CT_v1021: (byte 0) */
  HW(0,0)
, 0
,	/* CF_LAMBDA842: (byte 0) */
  VAPTAG(useLabel(FN_LAMBDA842))
, bytes2word(0,0,2,0)
, bytes2word(1,1,0,2)
, useLabel(CT_v1022)
,	/* FN_LAMBDA841: (byte 0) */
  bytes2word(NEEDHEAP_I32,PUSH_HEAP,HEAP_CVAL_N1,1)
, bytes2word(HEAP_ARG_ARG,1,2,RETURN)
, bytes2word(ENDCODE,0,0,0)
, bytes2word(0,0,0,0)
, 0
, CONSTR(1,2,0)
,	/* CT_v1022: (byte 0) */
  HW(0,2)
, 0
,	/* F0_LAMBDA841: (byte 0) */
  CAPTAG(useLabel(FN_LAMBDA841),2)
, bytes2word(1,0,0,1)
, useLabel(CT_v1028)
,	/* FN_LAMBDA840: (byte 0) */
  bytes2word(NEEDSTACK_I16,PUSH_ZAP_ARG_I1,EVAL,NEEDHEAP_I32)
, bytes2word(TABLESWITCH,2,TOP(8),BOT(8))
,	/* v1027: (byte 2) */
  bytes2word(TOP(4),BOT(4),POP_I1,JUMP)
,	/* v1026: (byte 2) */
  bytes2word(7,0,UNPACK,1)
,	/* v1023: (byte 3) */
  bytes2word(PUSH_P1,0,RETURN_EVAL,HEAP_CVAL_I3)
, bytes2word(PUSH_HEAP,HEAP_CVAL_I4,HEAP_OFF_N1,2)
, bytes2word(RETURN_EVAL,ENDCODE,0,0)
, bytes2word(0,0,0,0)
,	/* CT_v1028: (byte 0) */
  HW(2,1)
, 0
,	/* F0_LAMBDA840: (byte 0) */
  CAPTAG(useLabel(FN_LAMBDA840),1)
, VAPTAG(useLabel(FN_LAMBDA839))
, VAPTAG(useLabel(FN_NHC_46Internal_46_95patternMatchFail))
, bytes2word(0,0,0,0)
, useLabel(CT_v1030)
,	/* FN_LAMBDA839: (byte 0) */
  bytes2word(NEEDHEAP_I32,PUSH_CADR_N1,2,STRING)
, bytes2word(RETURN,ENDCODE,0,0)
, bytes2word(0,0,0,0)
, CONSTRW(1,0)
, useLabel(ST_v1029)
,	/* CT_v1030: (byte 0) */
  HW(0,0)
, 0
,	/* CF_LAMBDA839: (byte 0) */
  VAPTAG(useLabel(FN_LAMBDA839))
, bytes2word(1,0,0,1)
, useLabel(CT_v1031)
,	/* FN_LAMBDA838: (byte 0) */
  bytes2word(NEEDHEAP_I32,PUSH_HEAP,HEAP_CVAL_N1,1)
, bytes2word(HEAP_ARG,1,RETURN,ENDCODE)
, bytes2word(0,0,0,0)
, 0
, CONSTR(9,1,0)
,	/* CT_v1031: (byte 0) */
  HW(0,1)
, 0
,	/* F0_LAMBDA838: (byte 0) */
  CAPTAG(useLabel(FN_LAMBDA838),1)
, bytes2word(0,0,2,0)
, bytes2word(1,1,0,2)
, useLabel(CT_v1032)
,	/* FN_LAMBDA837: (byte 0) */
  bytes2word(NEEDHEAP_I32,PUSH_HEAP,HEAP_CVAL_N1,1)
, bytes2word(HEAP_ARG_ARG,1,2,RETURN)
, bytes2word(ENDCODE,0,0,0)
, bytes2word(0,0,0,0)
, 0
, CONSTR(1,2,0)
,	/* CT_v1032: (byte 0) */
  HW(0,2)
, 0
,	/* F0_LAMBDA837: (byte 0) */
  CAPTAG(useLabel(FN_LAMBDA837),2)
, bytes2word(0,0,4,0)
, bytes2word(3,1,2,2)
, bytes2word(1,3,0,4)
, useLabel(CT_v1058)
,	/* FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46378_46modifier: (byte 0) */
  bytes2word(NEEDSTACK_I16,PUSH_ARG_I3,EVAL,NEEDHEAP_I32)
, bytes2word(TABLESWITCH,4,TOP(12),BOT(12))
, bytes2word(TOP(8),BOT(8),TOP(8),BOT(8))
,	/* v1053: (byte 2) */
  bytes2word(TOP(8),BOT(8),POP_I1,JUMP)
,	/* v1036: (byte 2) */
  bytes2word(18,0,POP_I1,HEAP_CVAL_N1)
, bytes2word(1,HEAP_CVAL_I3,HEAP_ARG,2)
, bytes2word(PUSH_HEAP,HEAP_CVAL_I4,HEAP_ARG_ARG,4)
, bytes2word(1,HEAP_OFF_N1,6,HEAP_OFF_N1)
,	/* v1033: (byte 2) */
  bytes2word(6,RETURN_EVAL,PUSH_ARG,4)
, bytes2word(EVAL,NEEDHEAP_P1,37,TABLESWITCH)
, bytes2word(2,NOP,TOP(4),BOT(4))
,	/* v1054: (byte 2) */
  bytes2word(TOP(8),BOT(8),POP_I1,JUMP)
,	/* v1040: (byte 2) */
  bytes2word(104,0,UNPACK,2)
, bytes2word(PUSH_P1,0,EVAL,NEEDHEAP_P1)
, bytes2word(37,TABLESWITCH,2,NOP)
,	/* v1055: (byte 4) */
  bytes2word(TOP(4),BOT(4),TOP(8),BOT(8))
,	/* v1044: (byte 4) */
  bytes2word(POP_I1,JUMP,81,0)
, bytes2word(UNPACK,2,PUSH_I1,EVAL)
, bytes2word(NEEDHEAP_P1,37,TABLESWITCH,2)
,	/* v1056: (byte 4) */
  bytes2word(TOP(8),BOT(8),TOP(4),BOT(4))
,	/* v1048: (byte 4) */
  bytes2word(POP_I1,JUMP,60,0)
, bytes2word(POP_I1,PUSH_P1,3,EVAL)
, bytes2word(NEEDHEAP_P1,37,TABLESWITCH,2)
,	/* v1057: (byte 4) */
  bytes2word(TOP(8),BOT(8),TOP(4),BOT(4))
,	/* v1052: (byte 4) */
  bytes2word(POP_I1,JUMP,44,0)
, bytes2word(POP_I1,HEAP_CVAL_I5,HEAP_CVAL_P1,6)
, bytes2word(HEAP_OFF_N1,2,HEAP_ARG,3)
, bytes2word(HEAP_P1,0,HEAP_CVAL_N1,1)
, bytes2word(HEAP_CVAL_N1,2,HEAP_OFF_N1,6)
, bytes2word(HEAP_OFF_N1,3,HEAP_CVAL_N1,1)
, bytes2word(HEAP_CVAL_N1,2,HEAP_OFF_N1,5)
, bytes2word(HEAP_OFF_N1,3,HEAP_CVAL_N1,1)
, bytes2word(HEAP_CVAL_I3,HEAP_ARG,2,PUSH_HEAP)
, bytes2word(HEAP_CVAL_I4,HEAP_OFF_N1,7,HEAP_ARG)
, bytes2word(1,HEAP_OFF_N1,6,HEAP_OFF_N1)
,	/* v1045: (byte 2) */
  bytes2word(6,RETURN_EVAL,POP_P1,2)
,	/* v1041: (byte 3) */
  bytes2word(JUMP,2,0,POP_P1)
,	/* v1037: (byte 4) */
  bytes2word(2,JUMP,2,0)
, bytes2word(HEAP_CVAL_I5,HEAP_CVAL_P1,7,HEAP_ARG)
, bytes2word(2,HEAP_CVAL_IN3,HEAP_OFF_N1,3)
, bytes2word(HEAP_CVAL_P1,6,HEAP_OFF_N1,6)
, bytes2word(HEAP_ARG,3,HEAP_OFF_N1,5)
, bytes2word(HEAP_CVAL_N1,1,HEAP_CVAL_N1,2)
, bytes2word(HEAP_OFF_N1,6,HEAP_OFF_N1,3)
, bytes2word(HEAP_CVAL_N1,1,HEAP_CVAL_N1,2)
, bytes2word(HEAP_OFF_N1,5,HEAP_OFF_N1,3)
, bytes2word(HEAP_CVAL_N1,1,HEAP_CVAL_I3,HEAP_ARG)
, bytes2word(2,HEAP_CVAL_I4,HEAP_OFF_N1,7)
, bytes2word(HEAP_ARG,1,HEAP_OFF_N1,6)
, bytes2word(HEAP_OFF_N1,6,HEAP_CVAL_N1,1)
, bytes2word(HEAP_CVAL_N1,4,HEAP_CVAL_P1,7)
, bytes2word(HEAP_ARG,2,HEAP_CVAL_I4,HEAP_ARG)
, bytes2word(4,HEAP_OFF_N1,6,HEAP_OFF_N1)
, bytes2word(6,HEAP_OFF_N1,6,PUSH_HEAP)
, bytes2word(HEAP_CVAL_P1,8,HEAP_OFF_N1,15)
, bytes2word(HEAP_OFF_N1,7,RETURN_EVAL,ENDCODE)
, bytes2word(0,0,0,0)
, CONSTR(1,0,0)
, CONSTR(9,1,0)
, CONSTR(1,2,0)
, CONSTR(0,0,0)
,	/* CT_v1058: (byte 0) */
  HW(6,4)
, 0
,	/* F0_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46378_46modifier: (byte 0) */
  CAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46378_46modifier),4)
, VAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46TypeDef_46name))
, VAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46mkData))
, CAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46380_46modf),2)
, VAPTAG(useLabel(FN_NHC_46Internal_46_95apply2))
, VAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46TypeDef_46name_95))
, VAPTAG(useLabel(FN_Prelude_46_43_43))
, bytes2word(1,0,0,1)
, useLabel(CT_v1076)
,	/* FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46379_46inner: (byte 0) */
  bytes2word(NEEDSTACK_I16,PUSH_ZAP_ARG_I1,EVAL,NEEDHEAP_I32)
, bytes2word(TABLESWITCH,3,TOP(6),BOT(6))
,	/* v1062: (byte 4) */
  bytes2word(TOP(43),BOT(43),TOP(62),BOT(62))
, bytes2word(UNPACK,2,PUSH_P1,0)
, bytes2word(EVAL,NEEDHEAP_I32,TABLESWITCH,2)
,	/* v1074: (byte 4) */
  bytes2word(TOP(8),BOT(8),TOP(4),BOT(4))
,	/* v1066: (byte 4) */
  bytes2word(POP_I1,JUMP,18,0)
, bytes2word(UNPACK,1,HEAP_CVAL_I3,HEAP_P1)
, bytes2word(0,HEAP_CVAL_N1,1,HEAP_OFF_N1)
, bytes2word(3,PUSH_HEAP,HEAP_CVAL_I4,HEAP_P1)
,	/* v1063: (byte 4) */
  bytes2word(3,HEAP_OFF_N1,4,RETURN_EVAL)
, bytes2word(POP_P1,2,JUMP,70)
,	/* v1067: (byte 1) */
  bytes2word(0,UNPACK,2,HEAP_CVAL_I5)
, bytes2word(HEAP_CVAL_P1,6,HEAP_OFF_N1,2)
, bytes2word(HEAP_P1,0,HEAP_CVAL_N1,2)
, bytes2word(HEAP_OFF_N1,4,PUSH_HEAP,HEAP_CVAL_I4)
,	/* v1068: (byte 4) */
  bytes2word(HEAP_I2,HEAP_OFF_N1,4,RETURN_EVAL)
, bytes2word(UNPACK,2,PUSH_I1,EVAL)
, bytes2word(NEEDHEAP_I32,TABLESWITCH,4,NOP)
, bytes2word(TOP(12),BOT(12),TOP(8),BOT(8))
,	/* v1075: (byte 4) */
  bytes2word(TOP(8),BOT(8),TOP(8),BOT(8))
,	/* v1072: (byte 4) */
  bytes2word(POP_I1,JUMP,15,0)
, bytes2word(POP_I1,HEAP_CVAL_I5,HEAP_CVAL_P1,6)
, bytes2word(HEAP_OFF_N1,2,HEAP_P1,0)
, bytes2word(PUSH_HEAP,HEAP_CVAL_IN3,HEAP_OFF_N1,4)
,	/* v1069: (byte 1) */
  bytes2word(RETURN,HEAP_CVAL_I5,HEAP_CVAL_P1,6)
, bytes2word(HEAP_OFF_N1,2,HEAP_P1,0)
, bytes2word(HEAP_CVAL_IN3,HEAP_OFF_N1,4,PUSH_HEAP)
, bytes2word(HEAP_CVAL_I4,HEAP_I2,HEAP_OFF_N1,4)
,	/* v1059: (byte 1) */
  bytes2word(RETURN_EVAL,HEAP_CVAL_P1,7,PUSH_HEAP)
, bytes2word(HEAP_CVAL_P1,8,HEAP_OFF_N1,2)
, bytes2word(RETURN_EVAL,ENDCODE,0,0)
, bytes2word(0,0,0,0)
, 0
, CONSTR(4,1,0)
, CONSTR(5,1,0)
, CONSTR(9,1,0)
,	/* CT_v1076: (byte 0) */
  HW(6,1)
, 0
,	/* F0_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46379_46inner: (byte 0) */
  CAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46379_46inner),1)
, VAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46TypeDef_46name))
, VAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46380_46modf))
, CAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46379_46inner),1)
, VAPTAG(useLabel(FN_Prelude_46map))
, VAPTAG(useLabel(FN_LAMBDA836))
, VAPTAG(useLabel(FN_NHC_46Internal_46_95patternMatchFail))
, bytes2word(0,0,0,0)
, useLabel(CT_v1078)
,	/* FN_LAMBDA836: (byte 0) */
  bytes2word(NEEDHEAP_I32,PUSH_CADR_N1,2,STRING)
, bytes2word(RETURN,ENDCODE,0,0)
, bytes2word(0,0,0,0)
, CONSTRW(1,0)
, useLabel(ST_v1077)
,	/* CT_v1078: (byte 0) */
  HW(0,0)
, 0
,	/* CF_LAMBDA836: (byte 0) */
  VAPTAG(useLabel(FN_LAMBDA836))
, bytes2word(0,0,2,0)
, bytes2word(1,1,0,2)
, useLabel(CT_v1085)
,	/* FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46380_46modf: (byte 0) */
  bytes2word(NEEDSTACK_I16,PUSH_ZAP_ARG_I1,EVAL,NEEDHEAP_I32)
, bytes2word(TABLESWITCH,4,TOP(8),BOT(8))
, bytes2word(TOP(11),BOT(11),TOP(18),BOT(18))
,	/* v1080: (byte 2) */
  bytes2word(TOP(25),BOT(25),POP_I1,PUSH_ARG_I2)
,	/* v1081: (byte 1) */
  bytes2word(RETURN_EVAL,POP_I1,PUSH_HEAP,HEAP_CVAL_N1)
,	/* v1082: (byte 4) */
  bytes2word(1,HEAP_ARG,2,RETURN)
, bytes2word(POP_I1,PUSH_HEAP,HEAP_CVAL_N1,2)
,	/* v1083: (byte 3) */
  bytes2word(HEAP_ARG,2,RETURN,POP_I1)
, bytes2word(PUSH_HEAP,HEAP_CVAL_IN3,HEAP_ARG,2)
, bytes2word(RETURN,ENDCODE,0,0)
, bytes2word(0,0,0,0)
, 0
, CONSTR(3,1,0)
, CONSTR(2,1,0)
, CONSTR(0,1,0)
,	/* CT_v1085: (byte 0) */
  HW(0,2)
, 0
,	/* F0_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46380_46modf: (byte 0) */
  CAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46380_46modf),2)
, bytes2word(1,0,0,1)
, useLabel(CT_v1086)
,};
Node FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46dtd2TypeDef[] = {
  bytes2word(NEEDHEAP_I32,PUSH_ARG_I1,HEAP_CVAL_I3,HEAP_CVAL_I4)
, bytes2word(HEAP_CVAL_I5,HEAP_CVAL_N1,1,HEAP_CVAL_P1)
, bytes2word(6,HEAP_OFF_N1,3,HEAP_OFF_N1)
, bytes2word(3,HEAP_CVAL_P1,7,HEAP_CVAL_P1)
, bytes2word(8,HEAP_OFF_N1,5,PUSH_HEAP)
, bytes2word(HEAP_CVAL_P1,7,HEAP_OFF_N1,11)
, bytes2word(HEAP_OFF_N1,5,ZAP_ARG_I1,EVAL)
, bytes2word(NEEDHEAP_I32,APPLY,1,RETURN_EVAL)
, bytes2word(ENDCODE,0,0,0)
, bytes2word(0,0,0,0)
, 0
, CONSTR(0,0,0)
,	/* CT_v1086: (byte 0) */
  HW(6,1)
, 0
,};
Node F0_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46dtd2TypeDef[] = {
  CAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46dtd2TypeDef),1)
, VAPTAG(useLabel(FN_Prelude_46concatMap))
, useLabel(F0_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46convert)
, CAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46356_46database),2)
, VAPTAG(useLabel(FN_NHC_46Internal_46_95apply1))
, VAPTAG(useLabel(FN_Prelude_46_46))
, useLabel(CF_Prelude_46reverse)
, bytes2word(0,0,2,0)
, bytes2word(1,1,0,2)
, useLabel(CT_v1117)
,	/* FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46356_46database: (byte 0) */
  bytes2word(NEEDSTACK_I16,PUSH_ZAP_ARG_I2,EVAL,TABLESWITCH)
, bytes2word(2,NOP,TOP(4),BOT(4))
,	/* v1088: (byte 2) */
  bytes2word(TOP(7),BOT(7),POP_I1,PUSH_ARG_I1)
,	/* v1089: (byte 1) */
  bytes2word(RETURN_EVAL,UNPACK,2,PUSH_P1)
, bytes2word(0,EVAL,NEEDHEAP_I32,TABLESWITCH)
, bytes2word(5,NOP,TOP(14),BOT(14))
, bytes2word(TOP(100),BOT(100),TOP(10),BOT(10))
,	/* v1110: (byte 4) */
  bytes2word(TOP(10),BOT(10),TOP(10),BOT(10))
,	/* v1093: (byte 4) */
  bytes2word(POP_I1,JUMP,191,0)
, bytes2word(UNPACK,1,PUSH_P1,0)
, bytes2word(ZAP_STACK_P1,2,EVAL,NEEDHEAP_I32)
, bytes2word(UNPACK,2,PUSH_HEAP,HEAP_CVAL_I3)
, bytes2word(HEAP_CVAL_I4,HEAP_I1,HEAP_ARG,1)
, bytes2word(EVAL,NEEDHEAP_I32,TABLESWITCH,2)
,	/* v1097: (byte 4) */
  bytes2word(TOP(4),BOT(4),TOP(30),BOT(30))
, bytes2word(POP_I1,HEAP_CVAL_N1,1,HEAP_CVAL_N1)
, bytes2word(2,HEAP_OFF_N1,2,HEAP_I1)
, bytes2word(HEAP_CVAL_N1,2,HEAP_P1,0)
, bytes2word(HEAP_OFF_N1,5,HEAP_CVAL_IN3,HEAP_OFF_N1)
, bytes2word(4,HEAP_ARG,1,PUSH_HEAP)
, bytes2word(HEAP_CVAL_I5,HEAP_OFF_N1,4,HEAP_P1)
,	/* v1098: (byte 2) */
  bytes2word(5,RETURN_EVAL,UNPACK,1)
, bytes2word(PUSH_P1,0,ZAP_STACK_P1,1)
, bytes2word(EVAL,NEEDHEAP_I32,UNPACK,2)
, bytes2word(HEAP_CVAL_P1,6,HEAP_CVAL_N1,2)
, bytes2word(HEAP_P1,0,HEAP_P1,4)
, bytes2word(HEAP_CVAL_P1,7,HEAP_OFF_N1,5)
, bytes2word(HEAP_CVAL_I4,HEAP_P1,3,HEAP_OFF_N1)
, bytes2word(7,HEAP_ARG,1,PUSH_HEAP)
, bytes2word(HEAP_CVAL_I5,HEAP_OFF_N1,7,HEAP_P1)
,	/* v1101: (byte 2) */
  bytes2word(8,RETURN_EVAL,UNPACK,1)
, bytes2word(PUSH_P1,0,ZAP_STACK_P1,2)
, bytes2word(ZAP_STACK_P1,1,EVAL,NEEDHEAP_I32)
, bytes2word(UNPACK,2,PUSH_HEAP,HEAP_CVAL_I3)
, bytes2word(HEAP_CVAL_I4,HEAP_I1,HEAP_ARG,1)
, bytes2word(EVAL,NEEDHEAP_I32,TABLESWITCH,2)
,	/* v1105: (byte 4) */
  bytes2word(TOP(4),BOT(4),TOP(30),BOT(30))
, bytes2word(POP_I1,HEAP_CVAL_N1,1,HEAP_CVAL_N1)
, bytes2word(2,HEAP_I1,HEAP_OFF_N1,3)
, bytes2word(HEAP_CVAL_N1,2,HEAP_P1,0)
, bytes2word(HEAP_OFF_N1,5,HEAP_CVAL_IN3,HEAP_OFF_N1)
, bytes2word(4,HEAP_ARG,1,PUSH_HEAP)
, bytes2word(HEAP_CVAL_I5,HEAP_OFF_N1,4,HEAP_P1)
,	/* v1106: (byte 2) */
  bytes2word(5,RETURN_EVAL,UNPACK,1)
, bytes2word(PUSH_P1,0,ZAP_STACK_P1,1)
, bytes2word(EVAL,NEEDHEAP_I32,UNPACK,2)
, bytes2word(HEAP_CVAL_P1,6,HEAP_CVAL_P1,8)
, bytes2word(HEAP_CVAL_P1,9,HEAP_CVAL_P1,10)
, bytes2word(HEAP_P1,0,HEAP_P1,4)
, bytes2word(HEAP_CVAL_P1,11,HEAP_OFF_N1,6)
, bytes2word(HEAP_OFF_N1,5,HEAP_CVAL_N1,2)
, bytes2word(HEAP_OFF_N1,4,HEAP_I1,HEAP_CVAL_P1)
, bytes2word(7,HEAP_OFF_N1,13,HEAP_CVAL_I4)
, bytes2word(HEAP_P1,3,HEAP_OFF_N1,7)
, bytes2word(HEAP_ARG,1,PUSH_HEAP,HEAP_CVAL_I5)
, bytes2word(HEAP_OFF_N1,7,HEAP_P1,8)
,	/* v1090: (byte 1) */
  bytes2word(RETURN_EVAL,PUSH_HEAP,HEAP_CVAL_I5,HEAP_ARG)
, bytes2word(1,HEAP_I2,RETURN_EVAL,ENDCODE)
, bytes2word(0,0,0,0)
, 0
, CONSTR(1,2,0)
, CONSTR(0,2,0)
, CONSTR(0,0,0)
,	/* CT_v1117: (byte 0) */
  HW(9,2)
, 0
,	/* F0_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46356_46database: (byte 0) */
  CAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46356_46database),2)
, VAPTAG(useLabel(FN_Prelude_46lookup))
, useLabel(CF_Prelude_46Eq_46Text_46XML_46HaXml_46Types_46QName)
, VAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46356_46database))
, CAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46357_46replace),4)
, VAPTAG(useLabel(FN_NHC_46Internal_46_95apply4))
, VAPTAG(useLabel(FN_List_46nub))
, useLabel(CF_Prelude_46Eq_46Text_46XML_46HaXml_46Types_46AttDef)
, VAPTAG(useLabel(FN_Prelude_46_43_43))
, VAPTAG(useLabel(FN_NHC_46Internal_46_95apply1))
, bytes2word(0,0,4,0)
, bytes2word(3,1,2,2)
, bytes2word(1,3,0,4)
, useLabel(CT_v1133)
,	/* FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46357_46replace: (byte 0) */
  bytes2word(NEEDSTACK_I16,PUSH_ZAP_ARG,4,EVAL)
, bytes2word(NEEDHEAP_I32,TABLESWITCH,2,NOP)
,	/* v1121: (byte 4) */
  bytes2word(TOP(4),BOT(4),TOP(11),BOT(11))
, bytes2word(POP_I1,HEAP_CVAL_I3,PUSH_HEAP,HEAP_CVAL_I4)
,	/* v1122: (byte 3) */
  bytes2word(HEAP_OFF_N1,2,RETURN_EVAL,UNPACK)
, bytes2word(2,PUSH_P1,0,EVAL)
, bytes2word(NEEDHEAP_I32,UNPACK,2,PUSH_P1)
, bytes2word(0,PUSH_ARG_I2,PUSH_HEAP,HEAP_CVAL_I5)
, bytes2word(HEAP_ARG,1,EVAL,NEEDHEAP_I32)
, bytes2word(APPLY,2,EVAL,NEEDHEAP_I32)
, bytes2word(JUMPFALSE,15,0,HEAP_CVAL_N1)
, bytes2word(1,HEAP_ARG_ARG,2,3)
, bytes2word(PUSH_HEAP,HEAP_CVAL_N1,2,HEAP_OFF_N1)
,	/* v1127: (byte 4) */
  bytes2word(4,HEAP_P1,4,RETURN)
, bytes2word(PUSH_CVAL_P1,6,EVAL,NEEDHEAP_I32)
, bytes2word(JUMPFALSE,23,0,HEAP_CVAL_P1)
, bytes2word(7,HEAP_CVAL_P1,8,HEAP_OFF_N1)
, bytes2word(2,HEAP_ARG_ARG,1,2)
, bytes2word(HEAP_ARG,3,HEAP_P1,3)
, bytes2word(PUSH_HEAP,HEAP_CVAL_N1,2,HEAP_P1)
,	/* v1129: (byte 4) */
  bytes2word(3,HEAP_OFF_N1,8,RETURN)
, bytes2word(POP_P1,2,JUMP,2)
,	/* v1123: (byte 1) */
  bytes2word(0,POP_P1,2,JUMP)
,	/* v1118: (byte 2) */
  bytes2word(2,0,HEAP_CVAL_P1,9)
, bytes2word(PUSH_HEAP,HEAP_CVAL_P1,10,HEAP_OFF_N1)
, bytes2word(2,RETURN_EVAL,ENDCODE,0)
, bytes2word(0,0,0,0)
, CONSTR(1,2,0)
, CONSTR(0,2,0)
,	/* CT_v1133: (byte 0) */
  HW(8,4)
, 0
,	/* F0_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46357_46replace: (byte 0) */
  CAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46357_46replace),4)
, VAPTAG(useLabel(FN_LAMBDA845))
, VAPTAG(useLabel(FN_Prelude_46error))
, VAPTAG(useLabel(FN_Prelude_46_61_61))
, useLabel(CF_Prelude_46otherwise)
, CAPTAG(useLabel(FN_Text_46XML_46HaXml_46DtdToHaskell_46Convert_46Prelude_46357_46replace),4)
, VAPTAG(useLabel(FN_NHC_46Internal_46_95apply4))
, VAPTAG(useLabel(FN_LAMBDA846))
, VAPTAG(useLabel(FN_NHC_46Internal_46_95patternMatchFail))
, bytes2word(0,0,0,0)
, useLabel(CT_v1135)
,	/* FN_LAMBDA846: (byte 0) */
  bytes2word(NEEDHEAP_I32,PUSH_CADR_N1,2,STRING)
, bytes2word(RETURN,ENDCODE,0,0)
, bytes2word(0,0,0,0)
, CONSTRW(1,0)
, useLabel(ST_v1134)
,	/* CT_v1135: (byte 0) */
  HW(0,0)
, 0
,	/* CF_LAMBDA846: (byte 0) */
  VAPTAG(useLabel(FN_LAMBDA846))
, bytes2word(0,0,0,0)
, useLabel(CT_v1137)
,	/* FN_LAMBDA845: (byte 0) */
  bytes2word(NEEDHEAP_I32,PUSH_CADR_N1,2,STRING)
, bytes2word(RETURN,ENDCODE,0,0)
, bytes2word(0,0,0,0)
, CONSTRW(1,0)
, useLabel(ST_v1136)
,	/* CT_v1137: (byte 0) */
  HW(0,0)
, 0
,	/* CF_LAMBDA845: (byte 0) */
  VAPTAG(useLabel(FN_LAMBDA845))
,	/* ST_v977: (byte 0) */
 	/* ST_v974: (byte 4) */
  bytes2word(65,110,121,0)
,	/* ST_v1020: (byte 4) */
  bytes2word(83,116,114,0)
, bytes2word(84,101,120,116)
, bytes2word(46,88,77,76)
, bytes2word(46,72,97,88)
, bytes2word(109,108,46,68)
, bytes2word(116,100,84,111)
, bytes2word(72,97,115,107)
, bytes2word(101,108,108,46)
, bytes2word(67,111,110,118)
, bytes2word(101,114,116,58)
, bytes2word(32,78,111,32)
, bytes2word(109,97,116,99)
, bytes2word(104,105,110,103)
, bytes2word(32,97,108,116)
, bytes2word(101,114,110,97)
, bytes2word(116,105,118,101)
, bytes2word(32,105,110,32)
, bytes2word(99,97,115,101)
, bytes2word(32,101,120,112)
, bytes2word(114,101,115,115)
, bytes2word(105,111,110,32)
, bytes2word(97,116,32,54)
, bytes2word(53,58,49,49)
, bytes2word(45,54,56,58)
,	/* ST_v934: (byte 4) */
  bytes2word(54,48,46,0)
, bytes2word(84,101,120,116)
, bytes2word(46,88,77,76)
, bytes2word(46,72,97,88)
, bytes2word(109,108,46,68)
, bytes2word(116,100,84,111)
, bytes2word(72,97,115,107)
, bytes2word(101,108,108,46)
, bytes2word(67,111,110,118)
, bytes2word(101,114,116,58)
, bytes2word(32,80,97,116)
, bytes2word(116,101,114,110)
, bytes2word(32,109,97,116)
, bytes2word(99,104,32,102)
, bytes2word(97,105,108,117)
, bytes2word(114,101,32,105)
, bytes2word(110,32,102,117)
, bytes2word(110,99,116,105)
, bytes2word(111,110,32,97)
, bytes2word(116,32,49,49)
, bytes2word(49,58,49,45)
, bytes2word(49,49,56,58)
,	/* ST_v866: (byte 4) */
  bytes2word(52,57,46,0)
, bytes2word(84,101,120,116)
, bytes2word(46,88,77,76)
, bytes2word(46,72,97,88)
, bytes2word(109,108,46,68)
, bytes2word(116,100,84,111)
, bytes2word(72,97,115,107)
, bytes2word(101,108,108,46)
, bytes2word(67,111,110,118)
, bytes2word(101,114,116,58)
, bytes2word(32,80,97,116)
, bytes2word(116,101,114,110)
, bytes2word(32,109,97,116)
, bytes2word(99,104,32,102)
, bytes2word(97,105,108,117)
, bytes2word(114,101,32,105)
, bytes2word(110,32,102,117)
, bytes2word(110,99,116,105)
, bytes2word(111,110,32,97)
, bytes2word(116,32,49,50)
, bytes2word(50,58,49,45)
, bytes2word(49,51,52,58)
,	/* ST_v1134: (byte 4) */
  bytes2word(56,49,46,0)
, bytes2word(84,101,120,116)
, bytes2word(46,88,77,76)
, bytes2word(46,72,97,88)
, bytes2word(109,108,46,68)
, bytes2word(116,100,84,111)
, bytes2word(72,97,115,107)
, bytes2word(101,108,108,46)
, bytes2word(67,111,110,118)
, bytes2word(101,114,116,58)
, bytes2word(32,80,97,116)
, bytes2word(116,101,114,110)
, bytes2word(32,109,97,116)
, bytes2word(99,104,32,102)
, bytes2word(97,105,108,117)
, bytes2word(114,101,32,105)
, bytes2word(110,32,102,117)
, bytes2word(110,99,116,105)
, bytes2word(111,110,32,97)
, bytes2word(116,32,52,53)
, bytes2word(58,51,45,52)
, bytes2word(56,58,51,55)
,	/* ST_v995: (byte 2) */
  bytes2word(46,0,84,101)
, bytes2word(120,116,46,88)
, bytes2word(77,76,46,72)
, bytes2word(97,88,109,108)
, bytes2word(46,68,116,100)
, bytes2word(84,111,72,97)
, bytes2word(115,107,101,108)
, bytes2word(108,46,67,111)
, bytes2word(110,118,101,114)
, bytes2word(116,58,32,80)
, bytes2word(97,116,116,101)
, bytes2word(114,110,32,109)
, bytes2word(97,116,99,104)
, bytes2word(32,102,97,105)
, bytes2word(108,117,114,101)
, bytes2word(32,105,110,32)
, bytes2word(102,117,110,99)
, bytes2word(116,105,111,110)
, bytes2word(32,97,116,32)
, bytes2word(53,52,58,49)
, bytes2word(45,56,57,58)
,	/* ST_v1077: (byte 4) */
  bytes2word(50,54,46,0)
, bytes2word(84,101,120,116)
, bytes2word(46,88,77,76)
, bytes2word(46,72,97,88)
, bytes2word(109,108,46,68)
, bytes2word(116,100,84,111)
, bytes2word(72,97,115,107)
, bytes2word(101,108,108,46)
, bytes2word(67,111,110,118)
, bytes2word(101,114,116,58)
, bytes2word(32,80,97,116)
, bytes2word(116,101,114,110)
, bytes2word(32,109,97,116)
, bytes2word(99,104,32,102)
, bytes2word(97,105,108,117)
, bytes2word(114,101,32,105)
, bytes2word(110,32,102,117)
, bytes2word(110,99,116,105)
, bytes2word(111,110,32,97)
, bytes2word(116,32,56,49)
, bytes2word(58,53,45,56)
, bytes2word(52,58,54,49)
,	/* ST_v972: (byte 2) */
  bytes2word(46,0,84,101)
, bytes2word(120,116,46,88)
, bytes2word(77,76,46,72)
, bytes2word(97,88,109,108)
, bytes2word(46,68,116,100)
, bytes2word(84,111,72,97)
, bytes2word(115,107,101,108)
, bytes2word(108,46,67,111)
, bytes2word(110,118,101,114)
, bytes2word(116,58,32,80)
, bytes2word(97,116,116,101)
, bytes2word(114,110,32,109)
, bytes2word(97,116,99,104)
, bytes2word(32,102,97,105)
, bytes2word(108,117,114,101)
, bytes2word(32,105,110,32)
, bytes2word(102,117,110,99)
, bytes2word(116,105,111,110)
, bytes2word(32,97,116,32)
, bytes2word(57,56,58,53)
, bytes2word(45,49,48,56)
, bytes2word(58,51,55,46)
,	/* ST_v1029: (byte 1) */
  bytes2word(0,84,101,120)
, bytes2word(116,46,88,77)
, bytes2word(76,46,72,97)
, bytes2word(88,109,108,46)
, bytes2word(68,116,100,84)
, bytes2word(111,72,97,115)
, bytes2word(107,101,108,108)
, bytes2word(46,67,111,110)
, bytes2word(118,101,114,116)
, bytes2word(58,32,80,97)
, bytes2word(116,116,101,114)
, bytes2word(110,32,109,97)
, bytes2word(116,99,104,32)
, bytes2word(102,97,105,108)
, bytes2word(117,114,101,32)
, bytes2word(105,110,32,108)
, bytes2word(97,109,98,100)
, bytes2word(97,32,97,116)
, bytes2word(32,54,50,58)
, bytes2word(53,56,45,54)
, bytes2word(50,58,54,54)
,	/* ST_v953: (byte 2) */
 	/* ST_v1136: (byte 4) */
  bytes2word(46,0,95,0)
, bytes2word(100,116,100,50)
, bytes2word(84,121,112,101)
, bytes2word(68,101,102,46)
, bytes2word(114,101,112,108)
, bytes2word(97,99,101,58)
, bytes2word(32,110,111,32)
, bytes2word(101,108,101,109)
, bytes2word(101,110,116,32)
, bytes2word(116,111,32,114)
, bytes2word(101,112,108,97)
, bytes2word(99,101,0,0)
,};

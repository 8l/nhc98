#include "newmacros.h"
#include "runtime.h"

#define FN_Parse_46Lexical_46failPos	((void*)startLabel+12)
#define CT_v802	((void*)startLabel+76)
#define F0_Parse_46Lexical_46failPos	((void*)startLabel+84)
#define FN_LAMBDA785	((void*)startLabel+128)
#define CT_v804	((void*)startLabel+148)
#define CF_LAMBDA785	((void*)startLabel+156)
#define FN_LAMBDA784	((void*)startLabel+168)
#define CT_v806	((void*)startLabel+188)
#define CF_LAMBDA784	((void*)startLabel+196)
#define FN_LAMBDA783	((void*)startLabel+208)
#define CT_v808	((void*)startLabel+228)
#define CF_LAMBDA783	((void*)startLabel+236)
#define FN_LAMBDA782	((void*)startLabel+248)
#define CT_v810	((void*)startLabel+268)
#define CF_LAMBDA782	((void*)startLabel+276)
#define FN_Parse_46Lexical_46iLex	((void*)startLabel+292)
#define v812	((void*)startLabel+302)
#define v813	((void*)startLabel+307)
#define CT_v818	((void*)startLabel+380)
#define F0_Parse_46Lexical_46iLex	((void*)startLabel+388)
#define FN_LAMBDA790	((void*)startLabel+448)
#define v819	((void*)startLabel+470)
#define v821	((void*)startLabel+543)
#define v823	((void*)startLabel+576)
#define CT_v825	((void*)startLabel+656)
#define F0_LAMBDA790	((void*)startLabel+664)
#define FN_LAMBDA789	((void*)startLabel+708)
#define CT_v826	((void*)startLabel+720)
#define F0_LAMBDA789	((void*)startLabel+728)
#define FN_LAMBDA788	((void*)startLabel+740)
#define CT_v827	((void*)startLabel+752)
#define F0_LAMBDA788	((void*)startLabel+760)
#define FN_LAMBDA787	((void*)startLabel+772)
#define v836	((void*)startLabel+782)
#define v831	((void*)startLabel+786)
#define v837	((void*)startLabel+798)
#define v835	((void*)startLabel+802)
#define v832	((void*)startLabel+811)
#define v828	((void*)startLabel+816)
#define CT_v838	((void*)startLabel+836)
#define F0_LAMBDA787	((void*)startLabel+844)
#define FN_LAMBDA786	((void*)startLabel+864)
#define CT_v840	((void*)startLabel+884)
#define CF_LAMBDA786	((void*)startLabel+892)
#define FN_Parse_46Lexical_46piLex	((void*)startLabel+916)
#define v866	((void*)startLabel+926)
#define v844	((void*)startLabel+930)
#define v849	((void*)startLabel+1021)
#define v845	((void*)startLabel+1026)
#define v841	((void*)startLabel+1031)
#define v868	((void*)startLabel+1152)
#define v854	((void*)startLabel+1156)
#define v855	((void*)startLabel+1190)
#define v869	((void*)startLabel+1210)
#define v861	((void*)startLabel+1214)
#define v870	((void*)startLabel+1226)
#define v865	((void*)startLabel+1230)
#define v862	((void*)startLabel+1259)
#define v858	((void*)startLabel+1264)
#define v856	((void*)startLabel+1275)
#define v851	((void*)startLabel+1286)
#define CT_v871	((void*)startLabel+1356)
#define F0_Parse_46Lexical_46piLex	((void*)startLabel+1364)
#define FN_LAMBDA794	((void*)startLabel+1404)
#define CT_v873	((void*)startLabel+1424)
#define CF_LAMBDA794	((void*)startLabel+1432)
#define FN_LAMBDA793	((void*)startLabel+1444)
#define CT_v875	((void*)startLabel+1464)
#define CF_LAMBDA793	((void*)startLabel+1472)
#define FN_LAMBDA792	((void*)startLabel+1500)
#define v876	((void*)startLabel+1553)
#define CT_v878	((void*)startLabel+1624)
#define F0_LAMBDA792	((void*)startLabel+1632)
#define FN_LAMBDA791	((void*)startLabel+1684)
#define v879	((void*)startLabel+1721)
#define CT_v881	((void*)startLabel+1768)
#define F0_LAMBDA791	((void*)startLabel+1776)
#define v889	((void*)startLabel+1820)
#define v890	((void*)startLabel+1828)
#define v905	((void*)startLabel+1840)
#define v894	((void*)startLabel+1844)
#define v906	((void*)startLabel+1868)
#define v900	((void*)startLabel+1872)
#define v897	((void*)startLabel+1903)
#define v895	((void*)startLabel+1910)
#define v891	((void*)startLabel+1918)
#define v886	((void*)startLabel+1923)
#define v882	((void*)startLabel+1928)
#define CT_v908	((void*)startLabel+1952)
#define FN_LAMBDA798	((void*)startLabel+1996)
#define CT_v910	((void*)startLabel+2016)
#define CF_LAMBDA798	((void*)startLabel+2024)
#define FN_LAMBDA797	((void*)startLabel+2036)
#define CT_v912	((void*)startLabel+2056)
#define CF_LAMBDA797	((void*)startLabel+2064)
#define FN_LAMBDA796	((void*)startLabel+2076)
#define CT_v914	((void*)startLabel+2096)
#define CF_LAMBDA796	((void*)startLabel+2104)
#define FN_LAMBDA795	((void*)startLabel+2116)
#define CT_v915	((void*)startLabel+2136)
#define CF_LAMBDA795	((void*)startLabel+2144)
#define CT_v916	((void*)startLabel+2212)
#define FN_Parse_46Lexical_46Prelude_46265_46beginning	((void*)startLabel+2256)
#define v933	((void*)startLabel+2268)
#define v920	((void*)startLabel+2272)
#define v935	((void*)startLabel+2400)
#define v928	((void*)startLabel+2404)
#define v929	((void*)startLabel+2421)
#define v930	((void*)startLabel+2436)
#define v932	((void*)startLabel+2440)
#define v925	((void*)startLabel+2443)
#define v921	((void*)startLabel+2448)
#define v917	((void*)startLabel+2453)
#define CT_v936	((void*)startLabel+2568)
#define F0_Parse_46Lexical_46Prelude_46265_46beginning	((void*)startLabel+2576)
#define FN_Parse_46Lexical_46Prelude_46266_46discard_95pragma	((void*)startLabel+2616)
#define v947	((void*)startLabel+2626)
#define v940	((void*)startLabel+2630)
#define v949	((void*)startLabel+2764)
#define v946	((void*)startLabel+2768)
#define v943	((void*)startLabel+2785)
#define v937	((void*)startLabel+2801)
#define CT_v950	((void*)startLabel+2824)
#define F0_Parse_46Lexical_46Prelude_46266_46discard_95pragma	((void*)startLabel+2832)
#define FN_LAMBDA799	((void*)startLabel+2864)
#define CT_v952	((void*)startLabel+2884)
#define CF_LAMBDA799	((void*)startLabel+2892)
#define ST_v803	((void*)startLabel+2896)
#define ST_v807	((void*)startLabel+2898)
#define ST_v805	((void*)startLabel+2903)
#define ST_v809	((void*)startLabel+2906)
#define ST_v911	((void*)startLabel+2919)
#define ST_v839	((void*)startLabel+2928)
#define ST_v913	((void*)startLabel+2983)
#define ST_v951	((void*)startLabel+3057)
#define ST_v909	((void*)startLabel+3121)
#define ST_v872	((void*)startLabel+3185)
#define ST_v874	((void*)startLabel+3227)
extern Node FN_NHC_46PackedString_46unpackPS[];
extern Node FN_Util_46Extra_46strPos[];
extern Node FN_Prelude_46_43_43[];
extern Node FN_Prelude_46error[];
extern Node FN_Util_46Extra_46insertPos[];
extern Node FN_Prelude_46seq[];
extern Node FN_Prelude_46_36[];
extern Node FN_Prelude_46Eq_46Prelude_46Int_46_61_61[];
extern Node FN_Prelude_46Eq_46Prelude_46Int_46_47_61[];
extern Node FN_Prelude_46Eq_46Parse_46Lex_46Lex_46_47_61[];
extern Node FN_Prelude_46_38_38[];
extern Node FN_NHC_46Internal_46_95patternMatchFail[];
extern Node FN_Prelude_46elem[];
extern Node CF_Prelude_46Eq_46Parse_46Lex_46Lex[];
extern Node FN_Prelude_46Eq_46Parse_46Lex_46Lex_46_61_61[];
extern Node FN_NHC_46PackedString_46packString[];
extern Node FN_Parse_46LexPre_46lexPre[];
extern Node FN_NHC_46Internal_46_95apply1[];
extern Node FN_Prelude_46Eq_46TokenId_46TokenId_46_61_61[];
extern Node CF_TokenId_46tinterface[];
extern Node FN_Util_46Extra_46toPos[];
extern Node CF_TokenId_46tMain[];

static Node startLabel[] = {
  bytes2word(3,0,2,1)
, bytes2word(1,2,0,3)
, useLabel(CT_v802)
,	/* FN_Parse_46Lexical_46failPos: (byte 0) */
  bytes2word(NEEDHEAP_I32,HEAP_CVAL_I3,HEAP_CVAL_I4,HEAP_ARG)
, bytes2word(1,HEAP_CVAL_I5,HEAP_CVAL_P1,6)
, bytes2word(HEAP_ARG,2,HEAP_CVAL_P1,7)
, bytes2word(HEAP_CVAL_P1,8,HEAP_CVAL_P1,9)
, bytes2word(HEAP_ARG,3,HEAP_OFF_N1,3)
, bytes2word(HEAP_CVAL_P1,9,HEAP_OFF_N1,6)
, bytes2word(HEAP_OFF_N1,5,HEAP_CVAL_P1,9)
, bytes2word(HEAP_OFF_N1,11,HEAP_OFF_N1,5)
, bytes2word(HEAP_CVAL_P1,9,HEAP_OFF_N1,15)
, bytes2word(HEAP_OFF_N1,5,HEAP_CVAL_P1,9)
, bytes2word(HEAP_OFF_N1,20,HEAP_OFF_N1,5)
, bytes2word(HEAP_CVAL_P1,9,HEAP_OFF_N1,24)
, bytes2word(HEAP_OFF_N1,5,PUSH_HEAP,HEAP_CVAL_P1)
, bytes2word(10,HEAP_OFF_N1,4,RETURN_EVAL)
, bytes2word(ENDCODE,0,0,0)
, bytes2word(0,0,0,0)
,	/* CT_v802: (byte 0) */
  HW(8,3)
, 0
,	/* F0_Parse_46Lexical_46failPos: (byte 0) */
  CAPTAG(useLabel(FN_Parse_46Lexical_46failPos),3)
, VAPTAG(useLabel(FN_LAMBDA782))
, VAPTAG(useLabel(FN_NHC_46PackedString_46unpackPS))
, VAPTAG(useLabel(FN_LAMBDA783))
, VAPTAG(useLabel(FN_Util_46Extra_46strPos))
, VAPTAG(useLabel(FN_LAMBDA784))
, VAPTAG(useLabel(FN_LAMBDA785))
, VAPTAG(useLabel(FN_Prelude_46_43_43))
, VAPTAG(useLabel(FN_Prelude_46error))
, bytes2word(0,0,0,0)
, useLabel(CT_v804)
,	/* FN_LAMBDA785: (byte 0) */
  bytes2word(NEEDHEAP_I32,PUSH_CADR_N1,2,STRING)
, bytes2word(RETURN,ENDCODE,0,0)
, bytes2word(0,0,0,0)
, CONSTRW(1,0)
, useLabel(ST_v803)
,	/* CT_v804: (byte 0) */
  HW(0,0)
, 0
,	/* CF_LAMBDA785: (byte 0) */
  VAPTAG(useLabel(FN_LAMBDA785))
, bytes2word(0,0,0,0)
, useLabel(CT_v806)
,	/* FN_LAMBDA784: (byte 0) */
  bytes2word(NEEDHEAP_I32,PUSH_CADR_N1,2,STRING)
, bytes2word(RETURN,ENDCODE,0,0)
, bytes2word(0,0,0,0)
, CONSTRW(1,0)
, useLabel(ST_v805)
,	/* CT_v806: (byte 0) */
  HW(0,0)
, 0
,	/* CF_LAMBDA784: (byte 0) */
  VAPTAG(useLabel(FN_LAMBDA784))
, bytes2word(0,0,0,0)
, useLabel(CT_v808)
,	/* FN_LAMBDA783: (byte 0) */
  bytes2word(NEEDHEAP_I32,PUSH_CADR_N1,2,STRING)
, bytes2word(RETURN,ENDCODE,0,0)
, bytes2word(0,0,0,0)
, CONSTRW(1,0)
, useLabel(ST_v807)
,	/* CT_v808: (byte 0) */
  HW(0,0)
, 0
,	/* CF_LAMBDA783: (byte 0) */
  VAPTAG(useLabel(FN_LAMBDA783))
, bytes2word(0,0,0,0)
, useLabel(CT_v810)
,	/* FN_LAMBDA782: (byte 0) */
  bytes2word(NEEDHEAP_I32,PUSH_CADR_N1,2,STRING)
, bytes2word(RETURN,ENDCODE,0,0)
, bytes2word(0,0,0,0)
, CONSTRW(1,0)
, useLabel(ST_v809)
,	/* CT_v810: (byte 0) */
  HW(0,0)
, 0
,	/* CF_LAMBDA782: (byte 0) */
  VAPTAG(useLabel(FN_LAMBDA782))
, bytes2word(3,0,2,1)
, bytes2word(1,2,0,3)
, useLabel(CT_v818)
,	/* FN_Parse_46Lexical_46iLex: (byte 0) */
  bytes2word(NEEDSTACK_I16,PUSH_ZAP_ARG_I3,EVAL,NEEDHEAP_I32)
, bytes2word(TABLESWITCH,2,TOP(4),BOT(4))
,	/* v812: (byte 2) */
  bytes2word(TOP(9),BOT(9),POP_I1,PUSH_HEAP)
,	/* v813: (byte 3) */
  bytes2word(HEAP_CVAL_N1,1,RETURN,UNPACK)
, bytes2word(2,PUSH_P1,0,ZAP_STACK_P1)
, bytes2word(1,EVAL,NEEDHEAP_I32,UNPACK)
, bytes2word(4,PUSH_HEAP,HEAP_CVAL_I3,HEAP_I2)
, bytes2word(PUSH_HEAP,HEAP_CVAL_I4,HEAP_ARG,1)
, bytes2word(PUSH_HEAP,HEAP_CVAL_I5,HEAP_OFF_N1,3)
, bytes2word(PUSH_HEAP,HEAP_CVAL_P1,6,HEAP_OFF_N1)
, bytes2word(5,HEAP_CVAL_P1,7,HEAP_P1)
, bytes2word(5,HEAP_CVAL_P1,8,HEAP_ARG)
, bytes2word(2,HEAP_P1,3,HEAP_ARG)
, bytes2word(1,HEAP_P1,0,HEAP_I1)
, bytes2word(HEAP_P1,4,HEAP_P1,5)
, bytes2word(HEAP_P1,6,HEAP_P1,7)
, bytes2word(HEAP_P1,9,PUSH_HEAP,HEAP_CVAL_P1)
, bytes2word(9,HEAP_OFF_N1,14,HEAP_OFF_N1)
, bytes2word(13,RETURN_EVAL,ENDCODE,0)
, bytes2word(0,0,0,0)
, 0
, CONSTR(0,0,0)
,	/* CT_v818: (byte 0) */
  HW(7,3)
, 0
,	/* F0_Parse_46Lexical_46iLex: (byte 0) */
  CAPTAG(useLabel(FN_Parse_46Lexical_46iLex),3)
, VAPTAG(useLabel(FN_Util_46Extra_46insertPos))
, VAPTAG(useLabel(FN_LAMBDA787))
, VAPTAG(useLabel(FN_LAMBDA788))
, VAPTAG(useLabel(FN_LAMBDA789))
, CAPTAG(useLabel(FN_Prelude_46seq),1)
, VAPTAG(useLabel(FN_LAMBDA790))
, VAPTAG(useLabel(FN_Prelude_46_36))
, bytes2word(0,0,10,0)
, bytes2word(9,1,8,2)
, bytes2word(7,3,6,4)
, bytes2word(5,5,4,6)
, bytes2word(3,7,2,8)
, bytes2word(1,9,0,10)
, useLabel(CT_v825)
,	/* FN_LAMBDA790: (byte 0) */
  bytes2word(NEEDSTACK_I16,PUSH_ARG_I1,EVAL,PUSH_ARG)
, bytes2word(8,EVAL,NEEDHEAP_I32,GT_W)
, bytes2word(JUMPFALSE,13,0,PUSH_HEAP)
, bytes2word(HEAP_CVAL_I3,HEAP_ARG_ARG,6,3)
, bytes2word(HEAP_ARG_ARG,1,7,HEAP_ARG_ARG_RET_EVAL)
,	/* v819: (byte 2) */
  bytes2word(9,10,HEAP_CVAL_I4,HEAP_ARG_ARG)
, bytes2word(8,1,HEAP_CVAL_I5,HEAP_ARG)
, bytes2word(1,HEAP_INT_P1,0,HEAP_CVAL_N1)
, bytes2word(1,HEAP_CVAL_P1,6,HEAP_ARG)
, bytes2word(9,HEAP_OFF_N1,3,HEAP_CVAL_P1)
, bytes2word(7,HEAP_OFF_N1,8,HEAP_OFF_N1)
, bytes2word(5,PUSH_HEAP,HEAP_CVAL_P1,7)
, bytes2word(HEAP_OFF_N1,14,HEAP_OFF_N1,5)
, bytes2word(EVAL,NEEDHEAP_I32,JUMPFALSE,40)
, bytes2word(0,HEAP_CVAL_P1,8,HEAP_ARG)
, bytes2word(2,HEAP_CVAL_N1,2,HEAP_CVAL_IN3)
, bytes2word(HEAP_ARG,2,HEAP_OFF_N1,3)
, bytes2word(HEAP_ARG_ARG,3,10,HEAP_CVAL_I3)
, bytes2word(HEAP_ARG_ARG,6,3,HEAP_ARG_ARG)
, bytes2word(1,7,HEAP_ARG_ARG,9)
, bytes2word(10,HEAP_CVAL_N1,4,HEAP_OFF_N1)
, bytes2word(13,HEAP_OFF_N1,9,PUSH_HEAP)
, bytes2word(HEAP_CVAL_P1,9,HEAP_OFF_N1,19)
,	/* v821: (byte 3) */
  bytes2word(HEAP_OFF_N1,5,RETURN_EVAL,HEAP_CVAL_I4)
, bytes2word(HEAP_ARG,8,HEAP_INT_P1,0)
, bytes2word(HEAP_CVAL_I4,HEAP_ARG,1,HEAP_INT_P1)
, bytes2word(0,PUSH_HEAP,HEAP_CVAL_P1,7)
, bytes2word(HEAP_OFF_N1,7,HEAP_OFF_N1,5)
, bytes2word(EVAL,NEEDHEAP_I32,JUMPFALSE,13)
, bytes2word(0,PUSH_HEAP,HEAP_CVAL_I3,HEAP_ARG_ARG)
, bytes2word(6,3,HEAP_ARG_ARG,1)
,	/* v823: (byte 4) */
  bytes2word(7,HEAP_ARG_ARG_RET_EVAL,9,10)
, bytes2word(HEAP_CVAL_P1,8,HEAP_ARG,2)
, bytes2word(HEAP_CVAL_N1,5,HEAP_CVAL_IN3,HEAP_ARG)
, bytes2word(2,HEAP_OFF_N1,3,HEAP_ARG_ARG)
, bytes2word(3,10,HEAP_CVAL_IN3,HEAP_ARG_ARG)
, bytes2word(6,7,HEAP_ARG_ARG,8)
, bytes2word(9,HEAP_CVAL_N1,4,HEAP_OFF_N1)
, bytes2word(6,HEAP_ARG,10,HEAP_CVAL_P1)
, bytes2word(10,HEAP_ARG_ARG,4,5)
, bytes2word(HEAP_OFF_N1,6,HEAP_CVAL_N1,4)
, bytes2word(HEAP_OFF_N1,18,HEAP_OFF_N1,6)
, bytes2word(PUSH_HEAP,HEAP_CVAL_P1,9,HEAP_OFF_N1)
, bytes2word(24,HEAP_OFF_N1,5,RETURN_EVAL)
, bytes2word(ENDCODE,0,0,0)
, bytes2word(0,0,0,0)
, 0
, CONSTR(9,0,0)
, CONSTR(1,2,0)
, CONSTR(0,4,0)
, CONSTR(15,0,0)
, CONSTR(45,0,0)
,	/* CT_v825: (byte 0) */
  HW(8,10)
, 0
,	/* F0_LAMBDA790: (byte 0) */
  CAPTAG(useLabel(FN_LAMBDA790),10)
, VAPTAG(useLabel(FN_Parse_46Lexical_46piLex))
, VAPTAG(useLabel(FN_Prelude_46Eq_46Prelude_46Int_46_61_61))
, VAPTAG(useLabel(FN_Prelude_46Eq_46Prelude_46Int_46_47_61))
, VAPTAG(useLabel(FN_Prelude_46Eq_46Parse_46Lex_46Lex_46_47_61))
, VAPTAG(useLabel(FN_Prelude_46_38_38))
, CAPTAG(useLabel(FN_Prelude_46seq),1)
, VAPTAG(useLabel(FN_Prelude_46_36))
, VAPTAG(useLabel(FN_Parse_46Lexical_46iLex))
, bytes2word(1,0,0,1)
, useLabel(CT_v826)
,	/* FN_LAMBDA789: (byte 0) */
  bytes2word(NEEDSTACK_I16,SELECTOR_EVAL,SELECT,2)
, bytes2word(ENDCODE,0,0,0)
, bytes2word(0,0,0,0)
,	/* CT_v826: (byte 0) */
  HW(0,1)
, 0
,	/* F0_LAMBDA789: (byte 0) */
  CAPTAG(useLabel(FN_LAMBDA789),1)
, bytes2word(1,0,0,1)
, useLabel(CT_v827)
,	/* FN_LAMBDA788: (byte 0) */
  bytes2word(NEEDSTACK_I16,SELECTOR_EVAL,SELECT,1)
, bytes2word(ENDCODE,0,0,0)
, bytes2word(0,0,0,0)
,	/* CT_v827: (byte 0) */
  HW(0,1)
, 0
,	/* F0_LAMBDA788: (byte 0) */
  CAPTAG(useLabel(FN_LAMBDA788),1)
, bytes2word(1,0,0,1)
, useLabel(CT_v838)
,	/* FN_LAMBDA787: (byte 0) */
  bytes2word(NEEDSTACK_I16,PUSH_ZAP_ARG_I1,EVAL,NEEDHEAP_I32)
, bytes2word(TABLESWITCH,2,TOP(4),BOT(4))
,	/* v836: (byte 2) */
  bytes2word(TOP(8),BOT(8),POP_I1,JUMP)
,	/* v831: (byte 2) */
  bytes2word(32,0,UNPACK,2)
, bytes2word(PUSH_I1,EVAL,NEEDHEAP_I32,TABLESWITCH)
, bytes2word(2,NOP,TOP(4),BOT(4))
,	/* v837: (byte 2) */
  bytes2word(TOP(8),BOT(8),POP_I1,JUMP)
,	/* v835: (byte 2) */
  bytes2word(11,0,UNPACK,2)
, bytes2word(PUSH_HEAP,HEAP_CVAL_N1,1,HEAP_I1)
,	/* v832: (byte 3) */
  bytes2word(HEAP_P1,4,RETURN,POP_P1)
,	/* v828: (byte 4) */
  bytes2word(2,JUMP,2,0)
, bytes2word(HEAP_CVAL_I3,PUSH_HEAP,HEAP_CVAL_I4,HEAP_OFF_N1)
, bytes2word(2,RETURN_EVAL,ENDCODE,0)
, bytes2word(0,0,0,0)
, 0
, CONSTR(0,2,0)
,	/* CT_v838: (byte 0) */
  HW(2,1)
, 0
,	/* F0_LAMBDA787: (byte 0) */
  CAPTAG(useLabel(FN_LAMBDA787),1)
, VAPTAG(useLabel(FN_LAMBDA786))
, VAPTAG(useLabel(FN_NHC_46Internal_46_95patternMatchFail))
, bytes2word(0,0,0,0)
, useLabel(CT_v840)
,	/* FN_LAMBDA786: (byte 0) */
  bytes2word(NEEDHEAP_I32,PUSH_CADR_N1,2,STRING)
, bytes2word(RETURN,ENDCODE,0,0)
, bytes2word(0,0,0,0)
, CONSTRW(1,0)
, useLabel(ST_v839)
,	/* CT_v840: (byte 0) */
  HW(0,0)
, 0
,	/* CF_LAMBDA786: (byte 0) */
  VAPTAG(useLabel(FN_LAMBDA786))
, bytes2word(0,0,6,0)
, bytes2word(5,1,4,2)
, bytes2word(3,3,2,4)
, bytes2word(1,5,0,6)
, useLabel(CT_v871)
,	/* FN_Parse_46Lexical_46piLex: (byte 0) */
  bytes2word(NEEDSTACK_I16,PUSH_ARG,6,EVAL)
, bytes2word(TABLESWITCH,2,TOP(4),BOT(4))
,	/* v866: (byte 2) */
  bytes2word(TOP(8),BOT(8),POP_I1,JUMP)
,	/* v844: (byte 2) */
  bytes2word(103,0,UNPACK,2)
, bytes2word(PUSH_P1,0,EVAL,NEEDHEAP_I32)
, bytes2word(UNPACK,4,HEAP_CVAL_N1,1)
, bytes2word(HEAP_CVAL_N1,2,HEAP_CVAL_IN3,HEAP_CVAL_N1)
, bytes2word(4,HEAP_CVAL_N1,5,HEAP_CVAL_N1)
, bytes2word(6,HEAP_OFF_N1,3,HEAP_OFF_N1)
, bytes2word(3,HEAP_CVAL_N1,6,HEAP_OFF_N1)
, bytes2word(7,HEAP_OFF_N1,5,HEAP_CVAL_N1)
, bytes2word(6,HEAP_OFF_N1,11,HEAP_OFF_N1)
, bytes2word(5,PUSH_HEAP,HEAP_CVAL_N1,6)
, bytes2word(HEAP_OFF_N1,15,HEAP_OFF_N1,5)
, bytes2word(PUSH_P1,0,PUSH_HEAP,HEAP_CVAL_I3)
, bytes2word(HEAP_CVAL_I4,HEAP_ARG,5,EVAL)
, bytes2word(NEEDHEAP_I32,APPLY,1,SLIDE_P1)
, bytes2word(1,EVAL,NEEDHEAP_I32,JUMPFALSE)
, bytes2word(33,0,HEAP_CVAL_N1,7)
, bytes2word(HEAP_ARG_ARG,4,5,HEAP_ARG_ARG)
, bytes2word(2,6,HEAP_CVAL_I5,HEAP_P1)
, bytes2word(0,HEAP_I2,HEAP_I1,HEAP_P1)
, bytes2word(3,HEAP_P1,5,HEAP_ARG_ARG)
, bytes2word(4,2,HEAP_ARG_ARG,3)
, bytes2word(6,PUSH_HEAP,HEAP_CVAL_N1,6)
, bytes2word(HEAP_OFF_N1,16,HEAP_OFF_N1,12)
,	/* v849: (byte 1) */
  bytes2word(RETURN,POP_P1,4,JUMP)
,	/* v845: (byte 2) */
  bytes2word(2,0,POP_P1,2)
,	/* v841: (byte 3) */
  bytes2word(JUMP,2,0,PUSH_ARG)
, bytes2word(5,EVAL,NEEDHEAP_I32,TABLESWITCH)
, bytes2word(57,NOP,TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(118),BOT(118))
, bytes2word(TOP(114),BOT(114),TOP(152),BOT(152))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
,	/* v868: (byte 4) */
  bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
,	/* v854: (byte 4) */
  bytes2word(POP_I1,JUMP,132,0)
, bytes2word(POP_I1,HEAP_CVAL_N1,8,HEAP_CVAL_N1)
, bytes2word(7,HEAP_ARG,4,HEAP_OFF_N1)
, bytes2word(3,HEAP_ARG_ARG,2,6)
, bytes2word(HEAP_CVAL_N1,6,HEAP_INT_P1,0)
, bytes2word(HEAP_ARG,2,HEAP_CVAL_P1,6)
, bytes2word(HEAP_OFF_N1,4,HEAP_INT_P1,0)
, bytes2word(HEAP_ARG,6,PUSH_HEAP,HEAP_CVAL_N1)
, bytes2word(6,HEAP_OFF_N1,13,HEAP_OFF_N1)
,	/* v855: (byte 2) */
  bytes2word(6,RETURN,POP_I1,PUSH_INT_P1)
, bytes2word(0,PUSH_ARG_I3,EVAL,NEEDHEAP_I32)
, bytes2word(EQ_W,JUMPFALSE,77,0)
, bytes2word(PUSH_ARG_I2,EVAL,NEEDHEAP_I32,TABLESWITCH)
, bytes2word(2,NOP,TOP(4),BOT(4))
,	/* v869: (byte 2) */
  bytes2word(TOP(8),BOT(8),POP_I1,JUMP)
,	/* v861: (byte 2) */
  bytes2word(52,0,UNPACK,2)
, bytes2word(PUSH_I1,EVAL,NEEDHEAP_I32,TABLESWITCH)
, bytes2word(2,NOP,TOP(4),BOT(4))
,	/* v870: (byte 2) */
  bytes2word(TOP(8),BOT(8),POP_I1,JUMP)
,	/* v865: (byte 2) */
  bytes2word(31,0,UNPACK,2)
, bytes2word(HEAP_CVAL_N1,9,HEAP_CVAL_N1,7)
, bytes2word(HEAP_ARG,4,HEAP_OFF_N1,3)
, bytes2word(HEAP_ARG_ARG,2,6,HEAP_CVAL_P1)
, bytes2word(6,HEAP_P1,3,HEAP_P1)
, bytes2word(0,HEAP_ARG,6,PUSH_HEAP)
, bytes2word(HEAP_CVAL_N1,6,HEAP_OFF_N1,10)
,	/* v862: (byte 3) */
  bytes2word(HEAP_OFF_N1,6,RETURN,POP_P1)
,	/* v858: (byte 4) */
  bytes2word(2,JUMP,2,0)
, bytes2word(HEAP_CVAL_P1,7,PUSH_HEAP,HEAP_CVAL_P1)
, bytes2word(8,HEAP_ARG_ARG,1,4)
,	/* v856: (byte 3) */
  bytes2word(HEAP_OFF_N1,4,RETURN_EVAL,HEAP_CVAL_P1)
, bytes2word(9,PUSH_HEAP,HEAP_CVAL_P1,8)
, bytes2word(HEAP_ARG_ARG,1,4,HEAP_OFF_N1)
,	/* v851: (byte 2) */
  bytes2word(4,RETURN_EVAL,HEAP_CVAL_N1,7)
, bytes2word(HEAP_ARG_ARG,4,5,HEAP_ARG_ARG)
, bytes2word(2,6,HEAP_CVAL_P1,6)
, bytes2word(HEAP_ARG_ARG,2,3,HEAP_ARG)
, bytes2word(6,PUSH_HEAP,HEAP_CVAL_N1,6)
, bytes2word(HEAP_OFF_N1,10,HEAP_OFF_N1,6)
, bytes2word(RETURN_EVAL,ENDCODE,0,0)
, bytes2word(0,0,0,0)
, 0
, CONSTR(8,0,0)
, CONSTR(6,0,0)
, CONSTR(0,4,0)
, CONSTR(1,2,0)
, CONSTR(0,0,0)
, CONSTR(41,0,0)
, CONSTR(53,0,0)
, CONSTR(56,0,0)
, CONSTR(50,0,0)
,	/* CT_v871: (byte 0) */
  HW(7,6)
, 0
,	/* F0_Parse_46Lexical_46piLex: (byte 0) */
  CAPTAG(useLabel(FN_Parse_46Lexical_46piLex),6)
, VAPTAG(useLabel(FN_Prelude_46elem))
, useLabel(CF_Prelude_46Eq_46Parse_46Lex_46Lex)
, VAPTAG(useLabel(FN_LAMBDA792))
, VAPTAG(useLabel(FN_Parse_46Lexical_46iLex))
, VAPTAG(useLabel(FN_LAMBDA793))
, VAPTAG(useLabel(FN_Parse_46Lexical_46failPos))
, VAPTAG(useLabel(FN_LAMBDA794))
, bytes2word(0,0,0,0)
, useLabel(CT_v873)
,	/* FN_LAMBDA794: (byte 0) */
  bytes2word(NEEDHEAP_I32,PUSH_CADR_N1,2,STRING)
, bytes2word(RETURN,ENDCODE,0,0)
, bytes2word(0,0,0,0)
, CONSTRW(1,0)
, useLabel(ST_v872)
,	/* CT_v873: (byte 0) */
  HW(0,0)
, 0
,	/* CF_LAMBDA794: (byte 0) */
  VAPTAG(useLabel(FN_LAMBDA794))
, bytes2word(0,0,0,0)
, useLabel(CT_v875)
,	/* FN_LAMBDA793: (byte 0) */
  bytes2word(NEEDHEAP_I32,PUSH_CADR_N1,2,STRING)
, bytes2word(RETURN,ENDCODE,0,0)
, bytes2word(0,0,0,0)
, CONSTRW(1,0)
, useLabel(ST_v874)
,	/* CT_v875: (byte 0) */
  HW(0,0)
, 0
,	/* CF_LAMBDA793: (byte 0) */
  VAPTAG(useLabel(FN_LAMBDA793))
, bytes2word(9,0,8,1)
, bytes2word(7,2,6,3)
, bytes2word(5,4,4,5)
, bytes2word(3,6,2,7)
, bytes2word(1,8,0,9)
, useLabel(CT_v878)
,	/* FN_LAMBDA792: (byte 0) */
  bytes2word(NEEDHEAP_I32,HEAP_CVAL_N1,1,PUSH_HEAP)
, bytes2word(HEAP_CVAL_I3,HEAP_ARG,4,HEAP_OFF_N1)
, bytes2word(3,EVAL,NEEDHEAP_I32,JUMPFALSE)
, bytes2word(41,0,HEAP_CVAL_I4,HEAP_ARG)
, bytes2word(3,HEAP_CVAL_N1,1,HEAP_CVAL_N1)
, bytes2word(2,HEAP_ARG,3,HEAP_OFF_N1)
, bytes2word(3,HEAP_ARG_ARG,7,5)
, bytes2word(HEAP_CVAL_IN3,HEAP_INT_P1,0,HEAP_ARG)
, bytes2word(7,HEAP_CVAL_I5,HEAP_OFF_N1,4)
, bytes2word(HEAP_INT_P1,0,HEAP_ARG,5)
, bytes2word(HEAP_CVAL_IN3,HEAP_OFF_N1,13,HEAP_OFF_N1)
, bytes2word(6,PUSH_HEAP,HEAP_CVAL_P1,6)
, bytes2word(HEAP_OFF_N1,19,HEAP_OFF_N1,5)
,	/* v876: (byte 1) */
  bytes2word(RETURN_EVAL,PUSH_HEAP,HEAP_CVAL_P1,7)
, bytes2word(HEAP_ARG,3,HEAP_CVAL_I4,HEAP_P1)
, bytes2word(0,HEAP_CVAL_N1,4,HEAP_CVAL_N1)
, bytes2word(2,HEAP_P1,0,HEAP_OFF_N1)
, bytes2word(3,HEAP_ARG_ARG,7,9)
, bytes2word(HEAP_CVAL_P1,8,HEAP_ARG_ARG,1)
, bytes2word(2,HEAP_ARG_ARG,3,4)
, bytes2word(HEAP_ARG_ARG,5,6,HEAP_ARG_ARG)
, bytes2word(7,8,HEAP_ARG,9)
, bytes2word(HEAP_CVAL_IN3,HEAP_OFF_N1,16,HEAP_OFF_N1)
, bytes2word(12,PUSH_HEAP,HEAP_CVAL_P1,6)
, bytes2word(HEAP_OFF_N1,22,HEAP_OFF_N1,5)
, bytes2word(RETURN_EVAL,ENDCODE,0,0)
, bytes2word(0,0,0,0)
, CONSTR(7,0,0)
, CONSTR(1,2,0)
, CONSTR(0,4,0)
, CONSTR(6,0,0)
,	/* CT_v878: (byte 0) */
  HW(6,9)
, 0
,	/* F0_LAMBDA792: (byte 0) */
  CAPTAG(useLabel(FN_LAMBDA792),9)
, VAPTAG(useLabel(FN_Prelude_46Eq_46Parse_46Lex_46Lex_46_61_61))
, CAPTAG(useLabel(FN_Prelude_46seq),1)
, VAPTAG(useLabel(FN_Parse_46Lexical_46iLex))
, VAPTAG(useLabel(FN_Prelude_46_36))
, VAPTAG(useLabel(FN_Util_46Extra_46insertPos))
, VAPTAG(useLabel(FN_LAMBDA791))
, bytes2word(9,0,8,1)
, bytes2word(7,2,6,3)
, bytes2word(5,4,4,5)
, bytes2word(3,6,2,7)
, bytes2word(1,8,0,9)
, useLabel(CT_v881)
,	/* FN_LAMBDA791: (byte 0) */
  bytes2word(NEEDSTACK_I16,PUSH_ARG,8,EVAL)
, bytes2word(PUSH_ARG_I2,EVAL,NEEDHEAP_I32,GT_W)
, bytes2word(JUMPFALSE,28,0,HEAP_CVAL_I3)
, bytes2word(HEAP_ARG,3,HEAP_CVAL_N1,1)
, bytes2word(HEAP_ARG_ARG,2,7,HEAP_CVAL_I4)
, bytes2word(HEAP_ARG,1,HEAP_OFF_N1,5)
, bytes2word(HEAP_ARG_ARG,2,3,HEAP_ARG_ARG)
, bytes2word(4,5,PUSH_HEAP,HEAP_CVAL_I5)
, bytes2word(HEAP_OFF_N1,13,HEAP_OFF_N1,9)
,	/* v879: (byte 1) */
  bytes2word(RETURN_EVAL,HEAP_CVAL_N1,2,HEAP_CVAL_IN3)
, bytes2word(HEAP_ARG,6,HEAP_OFF_N1,3)
, bytes2word(HEAP_ARG_ARG,7,9,HEAP_CVAL_P1)
, bytes2word(6,HEAP_ARG_ARG,7,8)
, bytes2word(HEAP_ARG,9,PUSH_HEAP,HEAP_CVAL_N1)
, bytes2word(1,HEAP_OFF_N1,10,HEAP_OFF_N1)
, bytes2word(6,RETURN_EVAL,ENDCODE,0)
, bytes2word(0,0,0,0)
, 0
, CONSTR(0,4,0)
, CONSTR(9,0,0)
, CONSTR(1,2,0)
,	/* CT_v881: (byte 0) */
  HW(4,9)
, 0
,	/* F0_LAMBDA791: (byte 0) */
  CAPTAG(useLabel(FN_LAMBDA791),9)
, CAPTAG(useLabel(FN_Prelude_46seq),1)
, VAPTAG(useLabel(FN_Parse_46Lexical_46piLex))
, VAPTAG(useLabel(FN_Prelude_46_36))
, VAPTAG(useLabel(FN_Parse_46Lexical_46iLex))
, bytes2word(1,0,0,1)
, useLabel(CT_v908)
,};
Node FN_Parse_46Lexical_46lexicalCont[] = {
  bytes2word(NEEDSTACK_I16,PUSH_ZAP_ARG_I1,EVAL,UNPACK)
, bytes2word(4,PUSH_P1,2,EVAL)
, bytes2word(NEEDHEAP_I32,TABLESWITCH,2,NOP)
,	/* v889: (byte 4) */
  bytes2word(TOP(4),BOT(4),TOP(12),BOT(12))
, bytes2word(POP_I1,HEAP_CVAL_I3,PUSH_HEAP,HEAP_CVAL_N1)
,	/* v890: (byte 4) */
  bytes2word(1,HEAP_OFF_N1,2,RETURN)
, bytes2word(UNPACK,2,PUSH_I1,EVAL)
, bytes2word(NEEDHEAP_I32,TABLESWITCH,2,NOP)
,	/* v905: (byte 4) */
  bytes2word(TOP(4),BOT(4),TOP(8),BOT(8))
,	/* v894: (byte 4) */
  bytes2word(POP_I1,JUMP,76,0)
, bytes2word(UNPACK,2,PUSH_INT_P1,0)
, bytes2word(PUSH_P1,3,ZAP_STACK_P1,3)
, bytes2word(EVAL,NEEDHEAP_I32,GT_W,JUMPFALSE)
, bytes2word(54,0,PUSH_P1,7)
, bytes2word(EVAL,NEEDHEAP_I32,TABLESWITCH,2)
,	/* v906: (byte 4) */
  bytes2word(TOP(4),BOT(4),TOP(8),BOT(8))
,	/* v900: (byte 4) */
  bytes2word(POP_I1,JUMP,33,0)
, bytes2word(UNPACK,2,PUSH_P1,0)
, bytes2word(ZAP_STACK_P1,2,ZAP_STACK_P1,1)
, bytes2word(EVAL,NEEDHEAP_I32,UNPACK,4)
, bytes2word(HEAP_CVAL_I4,HEAP_P1,0,HEAP_P1)
, bytes2word(9,HEAP_P1,6,HEAP_P1)
, bytes2word(10,HEAP_P1,11,HEAP_P1)
, bytes2word(13,PUSH_HEAP,HEAP_CVAL_N1,2)
,	/* v897: (byte 3) */
  bytes2word(HEAP_OFF_N1,8,RETURN,HEAP_CVAL_I5)
, bytes2word(PUSH_HEAP,HEAP_CVAL_P1,6,HEAP_OFF_N1)
,	/* v895: (byte 2) */
  bytes2word(2,RETURN_EVAL,HEAP_CVAL_P1,7)
, bytes2word(PUSH_HEAP,HEAP_CVAL_N1,1,HEAP_OFF_N1)
,	/* v891: (byte 2) */
  bytes2word(2,RETURN_EVAL,POP_P1,2)
,	/* v886: (byte 3) */
  bytes2word(JUMP,2,0,POP_P1)
,	/* v882: (byte 4) */
  bytes2word(4,JUMP,2,0)
, bytes2word(HEAP_CVAL_P1,8,PUSH_HEAP,HEAP_CVAL_P1)
, bytes2word(6,HEAP_OFF_N1,2,RETURN_EVAL)
, bytes2word(ENDCODE,0,0,0)
, bytes2word(0,0,0,0)
, CONSTR(1,1,0)
, CONSTR(0,1,0)
,	/* CT_v908: (byte 0) */
  HW(6,1)
, 0
,};
Node F0_Parse_46Lexical_46lexicalCont[] = {
  CAPTAG(useLabel(FN_Parse_46Lexical_46lexicalCont),1)
, VAPTAG(useLabel(FN_LAMBDA795))
, VAPTAG(useLabel(FN_Parse_46Lexical_46piLex))
, VAPTAG(useLabel(FN_LAMBDA796))
, VAPTAG(useLabel(FN_NHC_46Internal_46_95patternMatchFail))
, VAPTAG(useLabel(FN_LAMBDA797))
, VAPTAG(useLabel(FN_LAMBDA798))
, bytes2word(0,0,0,0)
, useLabel(CT_v910)
,	/* FN_LAMBDA798: (byte 0) */
  bytes2word(NEEDHEAP_I32,PUSH_CADR_N1,2,STRING)
, bytes2word(RETURN,ENDCODE,0,0)
, bytes2word(0,0,0,0)
, CONSTRW(1,0)
, useLabel(ST_v909)
,	/* CT_v910: (byte 0) */
  HW(0,0)
, 0
,	/* CF_LAMBDA798: (byte 0) */
  VAPTAG(useLabel(FN_LAMBDA798))
, bytes2word(0,0,0,0)
, useLabel(CT_v912)
,	/* FN_LAMBDA797: (byte 0) */
  bytes2word(NEEDHEAP_I32,PUSH_CADR_N1,2,STRING)
, bytes2word(RETURN,ENDCODE,0,0)
, bytes2word(0,0,0,0)
, CONSTRW(1,0)
, useLabel(ST_v911)
,	/* CT_v912: (byte 0) */
  HW(0,0)
, 0
,	/* CF_LAMBDA797: (byte 0) */
  VAPTAG(useLabel(FN_LAMBDA797))
, bytes2word(0,0,0,0)
, useLabel(CT_v914)
,	/* FN_LAMBDA796: (byte 0) */
  bytes2word(NEEDHEAP_I32,PUSH_CADR_N1,2,STRING)
, bytes2word(RETURN,ENDCODE,0,0)
, bytes2word(0,0,0,0)
, CONSTRW(1,0)
, useLabel(ST_v913)
,	/* CT_v914: (byte 0) */
  HW(0,0)
, 0
,	/* CF_LAMBDA796: (byte 0) */
  VAPTAG(useLabel(FN_LAMBDA796))
, bytes2word(0,0,0,0)
, useLabel(CT_v915)
,	/* FN_LAMBDA795: (byte 0) */
  bytes2word(NEEDHEAP_I32,PUSH_CADR_N1,2,STRING)
, bytes2word(RETURN,ENDCODE,0,0)
, bytes2word(0,0,0,0)
, CONSTRW(1,0)
, useLabel(ST_v911)
,	/* CT_v915: (byte 0) */
  HW(0,0)
, 0
,	/* CF_LAMBDA795: (byte 0) */
  VAPTAG(useLabel(FN_LAMBDA795))
, bytes2word(3,0,2,1)
, bytes2word(1,2,0,3)
, useLabel(CT_v916)
,};
Node FN_Parse_46Lexical_46lexical[] = {
  bytes2word(NEEDHEAP_I32,PUSH_HEAP,HEAP_CVAL_I3,HEAP_ARG)
, bytes2word(2,HEAP_CVAL_N1,1,HEAP_CVAL_N1)
, bytes2word(2,HEAP_INT_P1,0,HEAP_OFF_N1)
, bytes2word(3,HEAP_CVAL_I4,HEAP_P1,0)
, bytes2word(HEAP_CVAL_I5,HEAP_ARG,1,HEAP_P1)
, bytes2word(0,HEAP_ARG,3,HEAP_CVAL_P1)
, bytes2word(6,HEAP_OFF_N1,7,HEAP_OFF_N1)
, bytes2word(6,PUSH_HEAP,HEAP_CVAL_P1,7)
, bytes2word(HEAP_OFF_N1,13,HEAP_INT_P1,0)
, bytes2word(HEAP_OFF_N1,6,RETURN_EVAL,ENDCODE)
, bytes2word(0,0,0,0)
, CONSTR(1,2,0)
, CONSTR(0,0,0)
,	/* CT_v916: (byte 0) */
  HW(5,3)
, 0
,};
Node F0_Parse_46Lexical_46lexical[] = {
  CAPTAG(useLabel(FN_Parse_46Lexical_46lexical),3)
, VAPTAG(useLabel(FN_NHC_46PackedString_46packString))
, CAPTAG(useLabel(FN_Parse_46Lexical_46Prelude_46265_46beginning),1)
, VAPTAG(useLabel(FN_Parse_46LexPre_46lexPre))
, VAPTAG(useLabel(FN_NHC_46Internal_46_95apply1))
, VAPTAG(useLabel(FN_Parse_46Lexical_46iLex))
, bytes2word(0,0,2,0)
, bytes2word(1,1,0,2)
, useLabel(CT_v936)
,	/* FN_Parse_46Lexical_46Prelude_46265_46beginning: (byte 0) */
  bytes2word(NEEDSTACK_I16,PUSH_ARG_I2,EVAL,NEEDHEAP_P1)
, bytes2word(43,TABLESWITCH,2,NOP)
,	/* v933: (byte 4) */
  bytes2word(TOP(4),BOT(4),TOP(8),BOT(8))
,	/* v920: (byte 4) */
  bytes2word(POP_I1,JUMP,183,0)
, bytes2word(UNPACK,2,PUSH_P1,0)
, bytes2word(EVAL,UNPACK,4,PUSH_P1)
, bytes2word(3,EVAL,NEEDHEAP_P1,43)
, bytes2word(TABLESWITCH,57,TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(118),BOT(118))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(135),BOT(135),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(154),BOT(154),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
,	/* v935: (byte 4) */
  bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
,	/* v928: (byte 4) */
  bytes2word(POP_I1,JUMP,41,0)
, bytes2word(POP_I1,HEAP_CVAL_I3,HEAP_ARG,1)
, bytes2word(HEAP_CVAL_I4,HEAP_OFF_N1,3,HEAP_P1)
, bytes2word(5,PUSH_HEAP,HEAP_CVAL_N1,1)
, bytes2word(HEAP_P1,5,HEAP_OFF_N1,5)
,	/* v929: (byte 1) */
  bytes2word(RETURN,UNPACK,1,PUSH_HEAP)
, bytes2word(HEAP_CVAL_I5,HEAP_I1,HEAP_CVAL_P1,6)
, bytes2word(EVAL,NEEDHEAP_P1,43,JUMPFALSE)
,	/* v930: (byte 4) */
  bytes2word(4,0,PUSH_ARG_I2,RETURN)
,	/* v932: (byte 4) */
  bytes2word(POP_I1,JUMP,5,0)
,	/* v925: (byte 3) */
  bytes2word(POP_I1,PUSH_ARG_I2,RETURN,POP_P1)
,	/* v921: (byte 4) */
  bytes2word(4,JUMP,2,0)
, bytes2word(POP_P1,2,JUMP,2)
,	/* v917: (byte 1) */
  bytes2word(0,HEAP_CVAL_P1,7,HEAP_INT_P1)
, bytes2word(1,HEAP_INT_P1,0,HEAP_INT_P1)
, bytes2word(0,HEAP_INT_P1,0,HEAP_CVAL_N1)
, bytes2word(2,HEAP_CVAL_IN3,HEAP_ARG,1)
, bytes2word(HEAP_OFF_N1,8,HEAP_INT_P1,0)
, bytes2word(HEAP_OFF_N1,5,HEAP_CVAL_P1,7)
, bytes2word(HEAP_INT_P1,1,HEAP_INT_P1,0)
, bytes2word(HEAP_INT_P1,0,HEAP_INT_P1,0)
, bytes2word(HEAP_CVAL_N1,4,HEAP_CVAL_P1,8)
, bytes2word(HEAP_CVAL_IN3,HEAP_ARG,1,HEAP_OFF_N1)
, bytes2word(9,HEAP_INT_P1,0,HEAP_OFF_N1)
, bytes2word(6,HEAP_CVAL_P1,7,HEAP_INT_P1)
, bytes2word(1,HEAP_INT_P1,0,HEAP_INT_P1)
, bytes2word(0,HEAP_INT_P1,0,HEAP_CVAL_N1)
, bytes2word(5,HEAP_CVAL_IN3,HEAP_ARG,1)
, bytes2word(HEAP_OFF_N1,8,HEAP_INT_P1,0)
, bytes2word(HEAP_OFF_N1,5,HEAP_CVAL_N1,1)
, bytes2word(HEAP_OFF_N1,6,HEAP_ARG,2)
, bytes2word(HEAP_CVAL_N1,1,HEAP_OFF_N1,20)
, bytes2word(HEAP_OFF_N1,5,PUSH_HEAP,HEAP_CVAL_N1)
, bytes2word(1,HEAP_OFF_N1,35,HEAP_OFF_N1)
, bytes2word(5,RETURN,ENDCODE,0)
, bytes2word(0,0,0,0)
, 0
, CONSTR(56,0,0)
, CONSTR(29,1,0)
, CONSTR(0,4,0)
, CONSTR(51,0,0)
, CONSTR(1,2,0)
,	/* CT_v936: (byte 0) */
  HW(6,2)
, 0
,	/* F0_Parse_46Lexical_46Prelude_46265_46beginning: (byte 0) */
  CAPTAG(useLabel(FN_Parse_46Lexical_46Prelude_46265_46beginning),2)
, CAPTAG(useLabel(FN_Parse_46Lexical_46Prelude_46266_46discard_95pragma),1)
, VAPTAG(useLabel(FN_NHC_46Internal_46_95apply1))
, VAPTAG(useLabel(FN_Prelude_46Eq_46TokenId_46TokenId_46_61_61))
, useLabel(CF_TokenId_46tinterface)
, VAPTAG(useLabel(FN_Util_46Extra_46toPos))
, useLabel(CF_TokenId_46tMain)
, bytes2word(0,0,2,0)
, bytes2word(1,1,0,2)
, useLabel(CT_v950)
,	/* FN_Parse_46Lexical_46Prelude_46266_46discard_95pragma: (byte 0) */
  bytes2word(NEEDSTACK_I16,PUSH_ZAP_ARG_I2,EVAL,NEEDHEAP_I32)
, bytes2word(TABLESWITCH,2,TOP(4),BOT(4))
,	/* v947: (byte 2) */
  bytes2word(TOP(8),BOT(8),POP_I1,JUMP)
,	/* v940: (byte 2) */
  bytes2word(173,0,UNPACK,2)
, bytes2word(PUSH_P1,0,EVAL,UNPACK)
, bytes2word(4,PUSH_P1,3,ZAP_STACK_P1)
, bytes2word(4,ZAP_STACK_P1,3,ZAP_STACK_P1)
, bytes2word(2,EVAL,NEEDHEAP_I32,TABLESWITCH)
, bytes2word(57,NOP,TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(118),BOT(118),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
, bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
,	/* v949: (byte 4) */
  bytes2word(TOP(114),BOT(114),TOP(114),BOT(114))
,	/* v946: (byte 4) */
  bytes2word(POP_I1,JUMP,19,0)
, bytes2word(POP_I1,HEAP_CVAL_I3,HEAP_ARG,1)
, bytes2word(HEAP_CVAL_I4,HEAP_OFF_N1,3,HEAP_P1)
, bytes2word(5,PUSH_HEAP,HEAP_CVAL_N1,1)
, bytes2word(HEAP_P1,5,HEAP_OFF_N1,5)
,	/* v943: (byte 1) */
  bytes2word(RETURN,HEAP_CVAL_I5,HEAP_ARG,1)
, bytes2word(HEAP_CVAL_I4,HEAP_OFF_N1,3,HEAP_P1)
, bytes2word(5,PUSH_HEAP,HEAP_CVAL_N1,1)
, bytes2word(HEAP_P1,5,HEAP_OFF_N1,5)
,	/* v937: (byte 1) */
  bytes2word(RETURN,HEAP_CVAL_P1,6,PUSH_HEAP)
, bytes2word(HEAP_CVAL_P1,7,HEAP_OFF_N1,2)
, bytes2word(RETURN_EVAL,ENDCODE,0,0)
, bytes2word(0,0,0,0)
, 0
, CONSTR(1,2,0)
,	/* CT_v950: (byte 0) */
  HW(5,2)
, 0
,	/* F0_Parse_46Lexical_46Prelude_46266_46discard_95pragma: (byte 0) */
  CAPTAG(useLabel(FN_Parse_46Lexical_46Prelude_46266_46discard_95pragma),2)
, CAPTAG(useLabel(FN_Parse_46Lexical_46Prelude_46265_46beginning),1)
, VAPTAG(useLabel(FN_NHC_46Internal_46_95apply1))
, CAPTAG(useLabel(FN_Parse_46Lexical_46Prelude_46266_46discard_95pragma),1)
, VAPTAG(useLabel(FN_LAMBDA799))
, VAPTAG(useLabel(FN_NHC_46Internal_46_95patternMatchFail))
, bytes2word(0,0,0,0)
, useLabel(CT_v952)
,	/* FN_LAMBDA799: (byte 0) */
  bytes2word(NEEDHEAP_I32,PUSH_CADR_N1,2,STRING)
, bytes2word(RETURN,ENDCODE,0,0)
, bytes2word(0,0,0,0)
, CONSTRW(1,0)
, useLabel(ST_v951)
,	/* CT_v952: (byte 0) */
  HW(0,0)
, 0
,	/* CF_LAMBDA799: (byte 0) */
  VAPTAG(useLabel(FN_LAMBDA799))
,	/* ST_v803: (byte 0) */
 	/* ST_v807: (byte 2) */
  bytes2word(10,0,32,97)
,	/* ST_v805: (byte 3) */
  bytes2word(116,32,0,58)
,	/* ST_v809: (byte 2) */
  bytes2word(32,0,73,110)
, bytes2word(116,101,114,110)
, bytes2word(97,108,32,105)
,	/* ST_v911: (byte 3) */
  bytes2word(110,32,0,76)
, bytes2word(97,121,111,117)
,	/* ST_v839: (byte 4) */
  bytes2word(116,32,125,0)
, bytes2word(80,97,114,115)
, bytes2word(101,46,76,101)
, bytes2word(120,105,99,97)
, bytes2word(108,58,32,78)
, bytes2word(111,32,109,97)
, bytes2word(116,99,104,32)
, bytes2word(105,110,32,112)
, bytes2word(97,116,116,101)
, bytes2word(114,110,32,101)
, bytes2word(120,112,114,101)
, bytes2word(115,115,105,111)
, bytes2word(110,32,97,116)
, bytes2word(32,54,53,58)
,	/* ST_v913: (byte 3) */
  bytes2word(53,46,0,80)
, bytes2word(97,114,115,101)
, bytes2word(46,76,101,120)
, bytes2word(105,99,97,108)
, bytes2word(58,32,78,111)
, bytes2word(32,109,97,116)
, bytes2word(99,104,105,110)
, bytes2word(103,32,97,108)
, bytes2word(116,101,114,110)
, bytes2word(97,116,105,118)
, bytes2word(101,32,105,110)
, bytes2word(32,99,97,115)
, bytes2word(101,32,101,120)
, bytes2word(112,114,101,115)
, bytes2word(115,105,111,110)
, bytes2word(32,97,116,32)
, bytes2word(52,52,58,50)
, bytes2word(50,45,52,53)
, bytes2word(58,54,54,46)
,	/* ST_v951: (byte 1) */
  bytes2word(0,80,97,114)
, bytes2word(115,101,46,76)
, bytes2word(101,120,105,99)
, bytes2word(97,108,58,32)
, bytes2word(80,97,116,116)
, bytes2word(101,114,110,32)
, bytes2word(109,97,116,99)
, bytes2word(104,32,102,97)
, bytes2word(105,108,117,114)
, bytes2word(101,32,105,110)
, bytes2word(32,102,117,110)
, bytes2word(99,116,105,111)
, bytes2word(110,32,97,116)
, bytes2word(32,51,55,58)
, bytes2word(53,45,51,56)
, bytes2word(58,55,49,46)
,	/* ST_v909: (byte 1) */
  bytes2word(0,80,97,114)
, bytes2word(115,101,46,76)
, bytes2word(101,120,105,99)
, bytes2word(97,108,58,32)
, bytes2word(80,97,116,116)
, bytes2word(101,114,110,32)
, bytes2word(109,97,116,99)
, bytes2word(104,32,102,97)
, bytes2word(105,108,117,114)
, bytes2word(101,32,105,110)
, bytes2word(32,102,117,110)
, bytes2word(99,116,105,111)
, bytes2word(110,32,97,116)
, bytes2word(32,52,49,58)
, bytes2word(49,45,52,56)
, bytes2word(58,51,49,46)
,	/* ST_v872: (byte 1) */
  bytes2word(0,85,110,98)
, bytes2word(97,108,97,110)
, bytes2word(99,101,100,32)
, bytes2word(39,125,39,32)
, bytes2word(40,78,111,32)
, bytes2word(101,120,112,108)
, bytes2word(105,99,105,116)
, bytes2word(32,39,123,39)
, bytes2word(32,105,110,32)
, bytes2word(115,99,111,112)
,	/* ST_v874: (byte 3) */
  bytes2word(101,41,0,85)
, bytes2word(110,98,97,108)
, bytes2word(97,110,99,101)
, bytes2word(100,32,39,125)
, bytes2word(39,32,40,83)
, bytes2word(116,97,99,107)
, bytes2word(32,101,109,112)
, bytes2word(116,121,41,46)
, bytes2word(0,0,0,0)
,};

#include "newmacros.h"
#include "runtime.h"

#define FN_Derive_46Bounded_46mkBound	((void*)startLabel+16)
#define v636	((void*)startLabel+30)
#define v627	((void*)startLabel+34)
#define v637	((void*)startLabel+46)
#define v631	((void*)startLabel+50)
#define v638	((void*)startLabel+62)
#define v635	((void*)startLabel+66)
#define v632	((void*)startLabel+111)
#define v628	((void*)startLabel+201)
#define v624	((void*)startLabel+206)
#define CT_v639	((void*)startLabel+252)
#define F0_Derive_46Bounded_46mkBound	((void*)startLabel+260)
#define FN_LAMBDA616	((void*)startLabel+312)
#define CT_v641	((void*)startLabel+332)
#define CF_LAMBDA616	((void*)startLabel+340)
#define CT_v642	((void*)startLabel+392)
#define FN_LAMBDA622	((void*)startLabel+436)
#define CT_v643	((void*)startLabel+560)
#define F0_LAMBDA622	((void*)startLabel+568)
#define FN_LAMBDA621	((void*)startLabel+644)
#define CT_v644	((void*)startLabel+680)
#define F0_LAMBDA621	((void*)startLabel+688)
#define FN_LAMBDA620	((void*)startLabel+736)
#define CT_v645	((void*)startLabel+800)
#define F0_LAMBDA620	((void*)startLabel+808)
#define FN_LAMBDA619	((void*)startLabel+868)
#define CT_v646	((void*)startLabel+932)
#define F0_LAMBDA619	((void*)startLabel+940)
#define FN_LAMBDA618	((void*)startLabel+996)
#define CT_v647	((void*)startLabel+1104)
#define F0_LAMBDA618	((void*)startLabel+1112)
#define FN_LAMBDA617	((void*)startLabel+1164)
#define CT_v648	((void*)startLabel+1220)
#define F0_LAMBDA617	((void*)startLabel+1228)
#define ST_v640	((void*)startLabel+1240)
extern Node FN_Info_46ntI[];
extern Node FN_Info_46uniqueI[];
extern Node FN_Prelude_46map[];
extern Node F0_Prelude_46fst[];
extern Node FN_Prelude_46zip[];
extern Node FN_Prelude_46repeat[];
extern Node FN_NHC_46Internal_46_95apply1[];
extern Node FN_Prelude_46_46[];
extern Node FN_NHC_46Internal_46_95patternMatchFail[];
extern Node FN_IntState_46getInfo[];
extern Node FN_State_46_62_62_62_61[];
extern Node F0_NT_46mkNTvar[];
extern Node FN_NT_46mkNTcons[];
extern Node FN_Info_46tidI[];
extern Node FN_Info_46constrsI[];
extern Node CF_TokenId_46tTrue[];
extern Node FN_Prelude_46head[];
extern Node FN_Prelude_46last[];
extern Node CF_TokenId_46tminBound[];
extern Node FN_IntState_46addInstMethod[];
extern Node CF_TokenId_46tBounded[];
extern Node CF_TokenId_46tmaxBound[];
extern Node FN_Prelude_46_36[];
extern Node F0_State_46unitS[];
extern Node FN_Derive_46Lib_46syntaxCtxs[];
extern Node FN_Derive_46Lib_46syntaxType[];

static Node startLabel[] = {
  bytes2word(5,0,4,1)
, bytes2word(3,2,2,3)
, bytes2word(1,4,0,5)
, useLabel(CT_v639)
,	/* FN_Derive_46Bounded_46mkBound: (byte 0) */
  bytes2word(ZAP_ARG_I1,NEEDHEAP_I32,PUSH_HEAP,HEAP_CVAL_I3)
, bytes2word(HEAP_ARG,3,EVAL,NEEDHEAP_I32)
, bytes2word(TABLESWITCH,2,TOP(4),BOT(4))
,	/* v636: (byte 2) */
  bytes2word(TOP(8),BOT(8),POP_I1,JUMP)
,	/* v627: (byte 2) */
  bytes2word(174,0,UNPACK,4)
, bytes2word(PUSH_P1,3,EVAL,NEEDHEAP_I32)
, bytes2word(TABLESWITCH,2,TOP(4),BOT(4))
,	/* v637: (byte 2) */
  bytes2word(TOP(8),BOT(8),POP_I1,JUMP)
,	/* v631: (byte 2) */
  bytes2word(153,0,UNPACK,2)
, bytes2word(PUSH_I1,EVAL,NEEDHEAP_P1,46)
, bytes2word(TABLESWITCH,2,TOP(8),BOT(8))
,	/* v638: (byte 2) */
  bytes2word(TOP(4),BOT(4),POP_I1,JUMP)
,	/* v635: (byte 2) */
  bytes2word(47,0,POP_I1,HEAP_CVAL_N1)
, bytes2word(1,HEAP_CVAL_I4,HEAP_ARG,3)
, bytes2word(HEAP_CVAL_N1,2,HEAP_ARG,2)
, bytes2word(HEAP_OFF_N1,4,HEAP_CVAL_IN3,HEAP_OFF_N1)
, bytes2word(4,HEAP_CVAL_N1,1,HEAP_CVAL_IN3)
, bytes2word(HEAP_OFF_N1,2,HEAP_CVAL_N1,4)
, bytes2word(HEAP_OFF_N1,12,HEAP_OFF_N1,7)
, bytes2word(HEAP_OFF_N1,5,HEAP_CVAL_N1,1)
, bytes2word(HEAP_CVAL_N1,5,HEAP_OFF_N1,6)
, bytes2word(HEAP_OFF_N1,3,PUSH_HEAP,HEAP_CVAL_N1)
, bytes2word(6,HEAP_ARG_ARG,2,4)
,	/* v632: (byte 3) */
  bytes2word(HEAP_OFF_N1,6,RETURN,PUSH_HEAP)
, bytes2word(HEAP_CVAL_N1,7,HEAP_ARG_ARG,2)
, bytes2word(5,HEAP_CVAL_I5,HEAP_CVAL_P1,6)
, bytes2word(HEAP_CVAL_P1,7,HEAP_CVAL_P1,8)
, bytes2word(HEAP_P1,0,HEAP_CVAL_P1,9)
, bytes2word(HEAP_OFF_N1,4,HEAP_OFF_N1,4)
, bytes2word(HEAP_CVAL_P1,10,HEAP_OFF_N1,9)
, bytes2word(HEAP_OFF_N1,5,PUSH_HEAP,HEAP_CVAL_P1)
, bytes2word(9,HEAP_OFF_N1,4,HEAP_P1)
, bytes2word(3,HEAP_CVAL_N1,1,HEAP_CVAL_I4)
, bytes2word(HEAP_ARG,3,HEAP_CVAL_N1,2)
, bytes2word(HEAP_ARG,2,HEAP_OFF_N1,4)
, bytes2word(HEAP_CVAL_N1,5,HEAP_OFF_N1,4)
, bytes2word(HEAP_P1,0,HEAP_CVAL_N1,8)
, bytes2word(HEAP_ARG,2,HEAP_OFF_N1,5)
, bytes2word(HEAP_CVAL_IN3,HEAP_OFF_N1,4,HEAP_CVAL_N1)
, bytes2word(1,HEAP_CVAL_IN3,HEAP_OFF_N1,2)
, bytes2word(HEAP_CVAL_N1,4,HEAP_OFF_N1,18)
, bytes2word(HEAP_OFF_N1,7,HEAP_OFF_N1,5)
, bytes2word(HEAP_CVAL_N1,1,HEAP_CVAL_N1,5)
, bytes2word(HEAP_OFF_N1,6,HEAP_OFF_N1,3)
, bytes2word(PUSH_HEAP,HEAP_CVAL_N1,6,HEAP_ARG_ARG)
, bytes2word(2,4,HEAP_OFF_N1,6)
,	/* v628: (byte 1) */
  bytes2word(RETURN,POP_P1,4,JUMP)
,	/* v624: (byte 2) */
  bytes2word(2,0,HEAP_CVAL_P1,11)
, bytes2word(PUSH_HEAP,HEAP_CVAL_P1,12,HEAP_OFF_N1)
, bytes2word(2,RETURN_EVAL,ENDCODE,0)
, bytes2word(0,0,0,0)
, CONSTR(13,2,0)
, CONSTR(14,2,0)
, CONSTR(13,3,0)
, CONSTR(1,2,0)
, CONSTR(0,3,0)
, CONSTR(0,1,0)
, CONSTR(15,2,0)
, CONSTR(0,0,0)
,	/* CT_v639: (byte 0) */
  HW(10,5)
, 0
,	/* F0_Derive_46Bounded_46mkBound: (byte 0) */
  CAPTAG(useLabel(FN_Derive_46Bounded_46mkBound),5)
, VAPTAG(useLabel(FN_Info_46ntI))
, VAPTAG(useLabel(FN_Info_46uniqueI))
, CAPTAG(useLabel(FN_Prelude_46map),1)
, useLabel(F0_Prelude_46fst)
, VAPTAG(useLabel(FN_Prelude_46zip))
, VAPTAG(useLabel(FN_Prelude_46repeat))
, VAPTAG(useLabel(FN_NHC_46Internal_46_95apply1))
, VAPTAG(useLabel(FN_Prelude_46_46))
, VAPTAG(useLabel(FN_LAMBDA616))
, VAPTAG(useLabel(FN_NHC_46Internal_46_95patternMatchFail))
, bytes2word(0,0,0,0)
, useLabel(CT_v641)
,	/* FN_LAMBDA616: (byte 0) */
  bytes2word(NEEDHEAP_I32,PUSH_CADR_N1,2,STRING)
, bytes2word(RETURN,ENDCODE,0,0)
, bytes2word(0,0,0,0)
, CONSTRW(1,0)
, useLabel(ST_v640)
,	/* CT_v641: (byte 0) */
  HW(0,0)
, 0
,	/* CF_LAMBDA616: (byte 0) */
  VAPTAG(useLabel(FN_LAMBDA616))
, bytes2word(0,0,6,0)
, bytes2word(5,1,4,2)
, bytes2word(3,3,2,4)
, bytes2word(1,5,0,6)
, useLabel(CT_v642)
,};
Node FN_Derive_46Bounded_46deriveBounded[] = {
  bytes2word(NEEDHEAP_I32,HEAP_CVAL_I3,HEAP_ARG,3)
, bytes2word(HEAP_CVAL_I4,HEAP_ARG_ARG,5,2)
, bytes2word(HEAP_ARG_ARG,3,4,HEAP_ARG_ARG)
, bytes2word(6,1,PUSH_HEAP,HEAP_CVAL_I5)
, bytes2word(HEAP_OFF_N1,10,HEAP_OFF_N1,9)
, bytes2word(RETURN_EVAL,ENDCODE,0,0)
, bytes2word(0,0,0,0)
,	/* CT_v642: (byte 0) */
  HW(3,6)
, 0
,};
Node F0_Derive_46Bounded_46deriveBounded[] = {
  CAPTAG(useLabel(FN_Derive_46Bounded_46deriveBounded),6)
, CAPTAG(useLabel(FN_IntState_46getInfo),2)
, CAPTAG(useLabel(FN_LAMBDA622),1)
, VAPTAG(useLabel(FN_State_46_62_62_62_61))
, bytes2word(7,0,6,1)
, bytes2word(5,2,4,3)
, bytes2word(3,4,2,5)
, bytes2word(1,6,0,7)
, useLabel(CT_v643)
,	/* FN_LAMBDA622: (byte 0) */
  bytes2word(NEEDHEAP_P1,53,HEAP_CVAL_N1,1)
, bytes2word(HEAP_CVAL_I3,HEAP_CVAL_I4,HEAP_ARG,4)
, bytes2word(HEAP_CVAL_I5,HEAP_ARG,3,HEAP_OFF_N1)
, bytes2word(5,HEAP_CVAL_N1,1,HEAP_CVAL_N1)
, bytes2word(2,HEAP_OFF_N1,5,HEAP_OFF_N1)
, bytes2word(3,PUSH_HEAP,HEAP_CVAL_IN3,HEAP_ARG)
, bytes2word(4,HEAP_OFF_N1,13,HEAP_ARG)
, bytes2word(1,HEAP_OFF_N1,7,PUSH_HEAP)
, bytes2word(HEAP_CVAL_P1,6,HEAP_ARG,7)
, bytes2word(PUSH_HEAP,HEAP_CVAL_P1,7,HEAP_ARG)
, bytes2word(7,HEAP_CVAL_N1,4,HEAP_CVAL_N1)
, bytes2word(5,HEAP_CVAL_P1,8,HEAP_OFF_N1)
, bytes2word(3,HEAP_CVAL_P1,9,HEAP_ARG)
, bytes2word(6,HEAP_OFF_N1,5,PUSH_HEAP)
, bytes2word(HEAP_CVAL_N1,6,HEAP_ARG,5)
, bytes2word(HEAP_OFF_N1,5,HEAP_CVAL_P1,10)
, bytes2word(HEAP_I1,HEAP_CVAL_P1,11,HEAP_OFF_N1)
, bytes2word(3,HEAP_CVAL_P1,12,HEAP_I1)
, bytes2word(HEAP_I2,HEAP_P1,3,HEAP_ARG_ARG)
, bytes2word(1,2,HEAP_ARG_ARG,3)
, bytes2word(4,HEAP_P1,0,HEAP_ARG_ARG)
, bytes2word(5,6,PUSH_HEAP,HEAP_CVAL_P1)
, bytes2word(13,HEAP_OFF_N1,14,HEAP_OFF_N1)
, bytes2word(13,RETURN_EVAL,ENDCODE,0)
, bytes2word(0,0,0,0)
, CONSTR(15,2,0)
, CONSTR(0,2,0)
, CONSTR(4,0,0)
, CONSTR(1,4,0)
, CONSTR(1,2,0)
, CONSTR(0,0,0)
,	/* CT_v643: (byte 0) */
  HW(11,7)
, 0
,	/* F0_LAMBDA622: (byte 0) */
  CAPTAG(useLabel(FN_LAMBDA622),7)
, VAPTAG(useLabel(FN_Prelude_46map))
, useLabel(F0_NT_46mkNTvar)
, VAPTAG(useLabel(FN_NT_46mkNTcons))
, VAPTAG(useLabel(FN_Info_46tidI))
, VAPTAG(useLabel(FN_Info_46constrsI))
, useLabel(CF_TokenId_46tTrue)
, VAPTAG(useLabel(FN_NHC_46Internal_46_95apply1))
, VAPTAG(useLabel(FN_Prelude_46head))
, CAPTAG(useLabel(FN_IntState_46getInfo),2)
, CAPTAG(useLabel(FN_LAMBDA621),1)
, VAPTAG(useLabel(FN_State_46_62_62_62_61))
, bytes2word(11,0,10,1)
, bytes2word(9,2,8,3)
, bytes2word(7,4,6,5)
, bytes2word(5,6,4,7)
, bytes2word(3,8,2,9)
, bytes2word(1,10,0,11)
, useLabel(CT_v644)
,	/* FN_LAMBDA621: (byte 0) */
  bytes2word(NEEDHEAP_I32,HEAP_CVAL_I3,HEAP_ARG,1)
, bytes2word(HEAP_CVAL_I4,HEAP_OFF_N1,3,HEAP_CVAL_I5)
, bytes2word(HEAP_ARG_ARG,2,3,HEAP_ARG_ARG)
, bytes2word(4,5,HEAP_ARG_ARG,6)
, bytes2word(7,HEAP_ARG_ARG,11,8)
, bytes2word(HEAP_ARG_ARG,9,10,PUSH_HEAP)
, bytes2word(HEAP_CVAL_P1,6,HEAP_OFF_N1,14)
, bytes2word(HEAP_OFF_N1,13,RETURN_EVAL,ENDCODE)
, bytes2word(0,0,0,0)
,	/* CT_v644: (byte 0) */
  HW(4,11)
, 0
,	/* F0_LAMBDA621: (byte 0) */
  CAPTAG(useLabel(FN_LAMBDA621),11)
, VAPTAG(useLabel(FN_Prelude_46last))
, CAPTAG(useLabel(FN_IntState_46getInfo),2)
, CAPTAG(useLabel(FN_LAMBDA620),1)
, VAPTAG(useLabel(FN_State_46_62_62_62_61))
, bytes2word(11,0,10,1)
, bytes2word(9,2,8,3)
, bytes2word(7,4,6,5)
, bytes2word(5,6,4,7)
, bytes2word(3,8,2,9)
, bytes2word(1,10,0,11)
, useLabel(CT_v645)
,	/* FN_LAMBDA620: (byte 0) */
  bytes2word(NEEDHEAP_I32,HEAP_CVAL_N1,1,HEAP_CVAL_N1)
, bytes2word(2,HEAP_CVAL_I3,HEAP_OFF_N1,3)
, bytes2word(HEAP_CVAL_I4,HEAP_ARG,10,HEAP_OFF_N1)
, bytes2word(5,HEAP_CVAL_I5,HEAP_CVAL_P1,6)
, bytes2word(HEAP_ARG,1,HEAP_CVAL_I3,HEAP_ARG)
, bytes2word(2,HEAP_OFF_N1,8,HEAP_CVAL_P1)
, bytes2word(7,HEAP_ARG_ARG,1,2)
, bytes2word(HEAP_ARG_ARG,3,4,HEAP_ARG_ARG)
, bytes2word(5,6,HEAP_ARG_ARG,7)
, bytes2word(8,HEAP_ARG_ARG,9,11)
, bytes2word(HEAP_ARG,10,PUSH_HEAP,HEAP_CVAL_P1)
, bytes2word(8,HEAP_OFF_N1,19,HEAP_OFF_N1)
, bytes2word(14,RETURN_EVAL,ENDCODE,0)
, bytes2word(0,0,0,0)
, CONSTR(0,2,0)
, CONSTR(2,0,0)
,	/* CT_v645: (byte 0) */
  HW(6,11)
, 0
,	/* F0_LAMBDA620: (byte 0) */
  CAPTAG(useLabel(FN_LAMBDA620),11)
, useLabel(CF_TokenId_46tminBound)
, VAPTAG(useLabel(FN_NHC_46Internal_46_95apply1))
, CAPTAG(useLabel(FN_IntState_46addInstMethod),2)
, useLabel(CF_TokenId_46tBounded)
, CAPTAG(useLabel(FN_LAMBDA619),1)
, VAPTAG(useLabel(FN_State_46_62_62_62_61))
, bytes2word(0,0,12,0)
, bytes2word(11,1,10,2)
, bytes2word(9,3,8,4)
, bytes2word(7,5,6,6)
, bytes2word(5,7,4,8)
, bytes2word(3,9,2,10)
, bytes2word(1,11,0,12)
, useLabel(CT_v646)
,	/* FN_LAMBDA619: (byte 0) */
  bytes2word(NEEDHEAP_I32,HEAP_CVAL_N1,1,HEAP_CVAL_N1)
, bytes2word(2,HEAP_CVAL_I3,HEAP_OFF_N1,3)
, bytes2word(HEAP_CVAL_I4,HEAP_ARG,11,HEAP_OFF_N1)
, bytes2word(5,HEAP_CVAL_I5,HEAP_CVAL_P1,6)
, bytes2word(HEAP_ARG,1,HEAP_CVAL_I3,HEAP_ARG)
, bytes2word(2,HEAP_OFF_N1,8,HEAP_CVAL_P1)
, bytes2word(7,HEAP_ARG_ARG,3,4)
, bytes2word(HEAP_ARG_ARG,5,6,HEAP_ARG_ARG)
, bytes2word(7,12,HEAP_ARG_ARG,8)
, bytes2word(9,HEAP_ARG_ARG,10,11)
, bytes2word(PUSH_HEAP,HEAP_CVAL_P1,8,HEAP_OFF_N1)
, bytes2word(18,HEAP_OFF_N1,13,RETURN_EVAL)
, bytes2word(ENDCODE,0,0,0)
, bytes2word(0,0,0,0)
, CONSTR(0,2,0)
, CONSTR(2,0,0)
,	/* CT_v646: (byte 0) */
  HW(6,12)
, 0
,	/* F0_LAMBDA619: (byte 0) */
  CAPTAG(useLabel(FN_LAMBDA619),12)
, useLabel(CF_TokenId_46tmaxBound)
, VAPTAG(useLabel(FN_NHC_46Internal_46_95apply1))
, CAPTAG(useLabel(FN_IntState_46addInstMethod),2)
, useLabel(CF_TokenId_46tBounded)
, CAPTAG(useLabel(FN_LAMBDA618),1)
, VAPTAG(useLabel(FN_State_46_62_62_62_61))
, bytes2word(11,0,10,1)
, bytes2word(9,2,8,3)
, bytes2word(7,4,6,5)
, bytes2word(5,6,4,7)
, bytes2word(3,8,2,9)
, bytes2word(1,10,0,11)
, useLabel(CT_v647)
,	/* FN_LAMBDA618: (byte 0) */
  bytes2word(NEEDHEAP_P1,48,HEAP_CVAL_I3,HEAP_ARG_ARG)
, bytes2word(1,2,HEAP_ARG_ARG,8)
, bytes2word(3,HEAP_ARG,4,HEAP_CVAL_N1)
, bytes2word(1,HEAP_CVAL_N1,2,HEAP_CVAL_I4)
, bytes2word(HEAP_OFF_N1,3,HEAP_CVAL_I5,HEAP_ARG)
, bytes2word(10,HEAP_OFF_N1,5,HEAP_CVAL_P1)
, bytes2word(6,HEAP_ARG_ARG,7,8)
, bytes2word(HEAP_ARG_ARG,5,6,HEAP_OFF_N1)
, bytes2word(8,HEAP_CVAL_N1,1,HEAP_CVAL_N1)
, bytes2word(2,HEAP_CVAL_P1,7,HEAP_OFF_N1)
, bytes2word(3,HEAP_CVAL_I5,HEAP_ARG,10)
, bytes2word(HEAP_OFF_N1,5,HEAP_CVAL_P1,6)
, bytes2word(HEAP_ARG_ARG,7,8,HEAP_ARG_ARG)
, bytes2word(9,11,HEAP_OFF_N1,8)
, bytes2word(HEAP_CVAL_N1,1,HEAP_CVAL_IN3,HEAP_OFF_N1)
, bytes2word(8,HEAP_OFF_N1,3,HEAP_CVAL_IN3)
, bytes2word(HEAP_OFF_N1,24,HEAP_OFF_N1,5)
, bytes2word(HEAP_CVAL_N1,4,HEAP_OFF_N1,4)
, bytes2word(HEAP_CVAL_P1,8,HEAP_OFF_N1,42)
, bytes2word(HEAP_OFF_N1,4,PUSH_HEAP,HEAP_CVAL_P1)
, bytes2word(8,HEAP_CVAL_P1,9,HEAP_OFF_N1)
, bytes2word(5,RETURN_EVAL,ENDCODE,0)
, bytes2word(0,0,0,0)
, CONSTR(0,1,0)
, CONSTR(1,2,0)
, CONSTR(0,2,0)
, CONSTR(0,0,0)
,	/* CT_v647: (byte 0) */
  HW(7,11)
, 0
,	/* F0_LAMBDA618: (byte 0) */
  CAPTAG(useLabel(FN_LAMBDA618),11)
, CAPTAG(useLabel(FN_LAMBDA617),1)
, useLabel(CF_TokenId_46tminBound)
, VAPTAG(useLabel(FN_NHC_46Internal_46_95apply1))
, VAPTAG(useLabel(FN_Derive_46Bounded_46mkBound))
, useLabel(CF_TokenId_46tmaxBound)
, VAPTAG(useLabel(FN_Prelude_46_36))
, useLabel(F0_State_46unitS)
, bytes2word(0,0,6,0)
, bytes2word(5,1,4,2)
, bytes2word(3,3,2,4)
, bytes2word(1,5,0,6)
, useLabel(CT_v648)
,	/* FN_LAMBDA617: (byte 0) */
  bytes2word(NEEDHEAP_I32,HEAP_CVAL_I3,HEAP_ARG_ARG,3)
, bytes2word(1,HEAP_CVAL_I4,HEAP_ARG_ARG,3)
, bytes2word(4,HEAP_ARG,5,HEAP_CVAL_N1)
, bytes2word(1,HEAP_CVAL_N1,2,HEAP_OFF_N1)
, bytes2word(6,HEAP_OFF_N1,3,PUSH_HEAP)
, bytes2word(HEAP_CVAL_IN3,HEAP_ARG,3,HEAP_OFF_N1)
, bytes2word(13,HEAP_ARG,2,HEAP_OFF_N1)
, bytes2word(7,HEAP_ARG,6,RETURN)
, bytes2word(ENDCODE,0,0,0)
, bytes2word(0,0,0,0)
, 0
, CONSTR(6,5,0)
, CONSTR(1,2,0)
, CONSTR(0,0,0)
,	/* CT_v648: (byte 0) */
  HW(2,6)
, 0
,	/* F0_LAMBDA617: (byte 0) */
  CAPTAG(useLabel(FN_LAMBDA617),6)
, VAPTAG(useLabel(FN_Derive_46Lib_46syntaxCtxs))
, VAPTAG(useLabel(FN_Derive_46Lib_46syntaxType))
,	/* ST_v640: (byte 0) */
  bytes2word(68,101,114,105)
, bytes2word(118,101,46,66)
, bytes2word(111,117,110,100)
, bytes2word(101,100,58,32)
, bytes2word(78,111,32,109)
, bytes2word(97,116,99,104)
, bytes2word(105,110,103,32)
, bytes2word(97,108,116,101)
, bytes2word(114,110,97,116)
, bytes2word(105,118,101,32)
, bytes2word(105,110,32,99)
, bytes2word(97,115,101,32)
, bytes2word(101,120,112,114)
, bytes2word(101,115,115,105)
, bytes2word(111,110,32,97)
, bytes2word(116,32,51,52)
, bytes2word(58,50,45,52)
, bytes2word(55,58,50,56)
, bytes2word(46,0,0,0)
,};

interface Distribution.Verbosity where {

{-# NEED #-}
instance Data.Typeable.Typeable1 Ratio.Ratio;

{-# NEED #-}
instance Data.Typeable.Typeable1 NHC.Internal.IO;

{-# NEED #-}
instance (Data.Typeable.Typeable a) => Data.Typeable.Typeable (Ratio.Ratio a);

{-# NEED #-}
instance (Data.Typeable.Typeable a) => Data.Typeable.Typeable (NHC.Internal.IO a);

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Fractional (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.RealFrac (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Num (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Real (Ratio.Ratio a);

{-# NEED #-}
instance Prelude.Enum Verbosity;

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Enum (Ratio.Ratio a);

{-# NEED #-}
instance Prelude.Bounded Verbosity;

{-# NEED #-}
instance Prelude.Ord Verbosity;

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Ord (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Read a,Prelude.Integral a) => Prelude.Read (Ratio.Ratio a);

{-# NEED #-}
instance Prelude.Eq Verbosity;

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Eq (Ratio.Ratio a);

{-# NEED #-}
instance Prelude.Show Verbosity;

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Show (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Show a) => Prelude.Show (NHC.Internal.IO a);

{-# NEED #-}
instance Prelude.Monad NHC.Internal.IO;

{-# NEED #-}
instance Prelude.Functor NHC.Internal.IO;

{-# NEED #-}
instance Prelude.Functor Distribution.ReadE.ReadE;
interface Data.Typeable
{-# NEED #-}
class Typeable a;
interface Ratio
{-# NEED Ratio #-}
data Ratio a;
interface NHC.Internal
{-# NEED IO #-}
newtype {-#  #-} IO a;

{-# NEED World #-}
data World;
interface ! Distribution.Verbosity
{-# NEED showForGHC #-}
showForGHC{-# 1 #-}::(Verbosity -> Prelude.String);

{-# NEED showForCabal #-}
showForCabal{-# 1 #-}::(Verbosity -> Prelude.String);

{-# NEED flagToVerbosity #-}
flagToVerbosity{-# 0 #-}::(Distribution.ReadE.ReadE Verbosity);
interface Distribution.ReadE
{-# NEED ReadE #-}
newtype {-#  #-} ReadE a;

{-# NEED ErrorMsg #-}
type {-# 2 #-} ErrorMsg = Prelude.String;
interface ! Distribution.Verbosity
{-# NEED intToVerbosity #-}
intToVerbosity{-# 1 #-}::(Prelude.Int -> (Prelude.Maybe Verbosity));

{-# NEED lessVerbose #-}
lessVerbose{-# 1 #-}::(Verbosity -> Verbosity);

{-# NEED moreVerbose #-}
moreVerbose{-# 1 #-}::(Verbosity -> Verbosity);

{-# NEED deafening #-}
deafening{-# 0 #-}::Verbosity;

{-# NEED verbose #-}
verbose{-# 0 #-}::Verbosity;

{-# NEED normal #-}
normal{-# 0 #-}::Verbosity;

{-# NEED silent #-}
silent{-# 0 #-}::Verbosity;

{-# NEED Verbosity #-}
data Verbosity;
}

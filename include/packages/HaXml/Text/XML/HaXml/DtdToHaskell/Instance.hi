interface Text.XML.HaXml.DtdToHaskell.Instance where {

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Fractional (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Num (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Real (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.RealFrac (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Enum (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Read a,Prelude.Integral a) => Prelude.Read (Ratio.Ratio a);

{-# NEED #-}
instance Prelude.Eq Text.XML.HaXml.DtdToHaskell.TypeDef.TypeDef;

{-# NEED #-}
instance Prelude.Eq Text.XML.HaXml.DtdToHaskell.TypeDef.Name;

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Eq (Ratio.Ratio a);

{-# NEED #-}
instance Prelude.Eq Text.XML.HaXml.DtdToHaskell.TypeDef.StructType;

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Ord (Ratio.Ratio a);

{-# NEED #-}
instance Prelude.Functor NHC.Internal.IO;

{-# NEED #-}
instance Prelude.Monad NHC.Internal.IO;

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Show (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Show a) => Prelude.Show (NHC.Internal.IO a);

{-# NEED #-}
instance Prelude.Show Text.XML.HaXml.DtdToHaskell.TypeDef.StructType;

{-# NEED #-}
instance Prelude.Show Text.PrettyPrint.HughesPJ.Doc;
interface Ratio
{-# NEED Ratio #-}
data (Prelude.Integral a) => Ratio a;
interface NHC.Internal
{-# NEED IO #-}
newtype {-#  #-} IO a;
interface NHC.DErrNo
{-# NEED ErrNo #-}
data ErrNo;
interface IO
{-# NEED Handle #-}
newtype {-#  #-} Handle;
interface NHC.Internal
{-# NEED World #-}
data World;
interface ! Text.XML.HaXml.DtdToHaskell.Instance
{-# NEED mkInstance #-}
mkInstance{-# 1 #-}::(Text.XML.HaXml.DtdToHaskell.TypeDef.TypeDef -> Text.PrettyPrint.HughesPJ.Doc);
interface Text.PrettyPrint.HughesPJ
{-# NEED Doc #-}
data Doc;
interface Text.XML.HaXml.DtdToHaskell.TypeDef
{-# NEED TypeDef #-}
data TypeDef;

{-# NEED Constructors #-}
type {-# 1 #-} Constructors = [(Name,[StructType])];

{-# NEED AttrFields #-}
type {-# 2 #-} AttrFields = [(Name,StructType)];

{-# NEED StructType #-}
data StructType;

{-# NEED Name #-}
data Name;
}

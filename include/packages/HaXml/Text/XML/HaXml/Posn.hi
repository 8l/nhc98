interface Text.XML.HaXml.Posn where {

{-# NEED #-}
instance Prelude.Functor NHC.Internal.IO;

{-# NEED #-}
instance Prelude.Monad NHC.Internal.IO;

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Fractional (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.RealFrac (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Num (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Real (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Enum (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Read a,Prelude.Integral a) => Prelude.Read (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Ord (Ratio.Ratio a);

{-# NEED #-}
instance Prelude.Eq Posn;

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Eq (Ratio.Ratio a);

{-# NEED #-}
instance Prelude.Show Posn;

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Show (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Show a) => Prelude.Show (NHC.Internal.IO a);
interface Ratio
{-# NEED Ratio #-}
data Ratio a;
interface NHC.Internal
{-# NEED IO #-}
newtype {-#  #-} IO a;
interface NHC.DErrNo
{-# NEED ErrNo #-}
data ErrNo;
interface IO
{-# NEED Handle #-}
newtype {-#  #-} Handle;
interface NHC.Internal
{-# NEED World #-}
data World;
interface ! Text.XML.HaXml.Posn
{-# NEED white #-}
white{-# 1 #-}::(Prelude.Char -> (Posn -> Posn));

{-# NEED tab #-}
tab{-# 1 #-}::(Posn -> Posn);

{-# NEED newline #-}
newline{-# 1 #-}::(Posn -> Posn);

{-# NEED addcol #-}
addcol{-# 2 #-}::(Prelude.Int -> (Posn -> Posn));

{-# NEED forcep #-}
forcep{-# 1 #-}::(Posn -> Prelude.Int);

{-# NEED posInNewCxt #-}
posInNewCxt{-# 2 #-}::(Prelude.String -> ((Prelude.Maybe Posn) -> Posn));

{-# NEED noPos #-}
noPos{-# 0 #-}::Posn;

{-# NEED posnColumn #-}
posnColumn{-# 1 #-}::(Posn -> Prelude.Int);

{-# NEED posnLine #-}
posnLine{-# 1 #-}::(Posn -> Prelude.Int);

{-# NEED posnFilename #-}
posnFilename{-# 1 #-}::(Posn -> Prelude.FilePath);

{-# NEED Posn #-}
data Posn;
}
